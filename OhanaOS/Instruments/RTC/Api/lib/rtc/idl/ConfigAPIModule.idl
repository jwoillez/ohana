/**
 * $RCSfile: ConfigAPIModule.idl,v $
 * $Revision: 1.2 $
 * $Date: 2007/09/27 23:25:57 $
 */

/**
 * @file
 * The interface definition for the ConfigAPIModule server.
 * @ingroup Configuration
 *
 * @author Michael Deck
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:25:57 $
 */

#ifndef INC_CONFIGSERVER_API_MODULE_IDL
#define INC_CONFIGSERVER_API_MODULE_IDL
#pragma prefix "rtc.jpl.nasa.gov"

#include "ConfigAPICommon.idl"
#include "ConfigAPIEnums.idl"
#include "ConfigAPIExceptions.idl"
#include "ConfigAPIStructs.idl"

module RTC {
  module Configuration {
/**
 * @addtogroup Configuration
 * @{
 */

    /**
     * Defines operations mostly on modules.
     */
    interface ConfigAPIModule
    {
      /**
       * Add a module to the repository in the provided workspace.
       * newModule.name and newModule.branch must be set. Other attributes are
       * optional and have defaults.
       * <p>Events: ModuleAddedEvent
       *
       * @param  workspaceName the workspace to use
       * @param  newModule the module to add
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void addConfigModule
        (in string workspaceName, in ConfigModuleStruct newModule)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Mark a module and all contained classes and instances in the workspace
       * locally-removed. When a class is deleted, delete all members as well as
       * all subtypes and instances. When an instance is deleted, delete all
       * members and reset all links-to to default.
       * <p>Events: {{{InstanceModifiedEvent} InstanceDeletedEvent} ClassDeletedEvent} ModuleDeletedEvent
       *
       * @param  workspaceName name of the workspace to delete module from
       * @param  moduleID module to delete
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void deleteConfigModule
        (in string workspaceName, in ModuleIDStruct moduleID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Return array of fully-attributed (without extended status) modules in
       * workspace.
       *
       * @param  workspaceName name of the workspace to lookup module and
       * references in
       * @return array of fully-attributed (without extended status) modules in
       * workspace
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      ModuleList getConfigModules(in string workspaceName)
        raises (ConfigAPIException, TaskKilledException);

      /**
       * Return the collection of items, fully-qualified but without extended
       * status, that are directly dependent on the module, such as classes and
       * instances in the module.
       *
       * @param workspaceName name of the workspace to lookup module and
       * references in
       * @param moduleID identifier of the module to lookup
       * @return collection of fully-qualified (without extended status) items
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      ItemList getItemsDependentOnModule (in string workspaceName, in ModuleIDStruct moduleID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Get array of fully-attributed (without extended status) classes and
       * instances in module.
       *
       * @param  workspaceName workspace to look for module and members in
       * @param  moduleID module to look for members in
       * @return array of fully-attributed (without extended status) members in
       * module as Anys
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      ItemList getMembersInConfigModule
        (in string workspaceName,  in ModuleIDStruct moduleID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Get array of fully-attributed (without extended status) classes in
       * module. It appears that this method is considerably faster than
       * getMembersInConfigModule if you know you only want classes.
       *
       * @param  workspaceName workspace to look for module and members in
       * @param  moduleID module to look for members in
       * @return array of fully-attributed (without extended status) classes in
       * module
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      ClassList getClassesInConfigModule
        (in string workspaceName,  in ModuleIDStruct moduleID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Get array of fully-attributed (without extended status) classes and
       * instances in module. It appears that this method is considerably faster
       * than getMembersInConfigModule if you know you only want classes.
       *
       * @param  workspaceName workspace to look for module and members in
       * @param  moduleID module to look for members in
       * @return array of fully-attributed (without extended status) instances
       * in module
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      InstanceList getInstancesInConfigModule
        (in string workspaceName,  in ModuleIDStruct moduleID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Gets the fully-attributed info of the module.
       *
       * @param  workspaceName name of the workspace to lookup module in
       * @param  moduleID module to lookup
       * @return fully-attributed module info struct without extended status
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      ModuleInfoStruct getModuleAttributes
        (in string workspaceName, in ModuleIDStruct moduleID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Get the extended status of the module.
       *
       * @param workspaceName name of the workspace to look for module in
       * @param moduleID ID of module to lookup extended status
       * @return extended status
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      ItemRevisionStatus getModuleExtendedStatus (in string workspaceName, in ModuleIDStruct moduleID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Get the log records associated with the module
       *
       * @param workspaceName name of the workspace to look for module in
       * @param moduleID ID of module to lookup
       * @return sequence of ItemLogInfoStruct containing log records for this
       * module
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      ItemLogInfoList getModuleLogInfo (in string workspaceName, in ModuleIDStruct moduleID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Get all the modules that moduleID depends on, directly or indirectly.
       *
       * @param workspaceName name of workspace to look in
       * @param moduleID name of module to get dependencies on
       * @return set of fully-attributed modules
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      ModuleList getModulesModuleDependsOn (in string workspaceName, in ModuleIDStruct moduleID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Return true iff module exists in workspace.
       *
       * @param  workspaceName name of workspace to look for module in
       * @param  moduleID identifier of module to lookup
       * @return true iff module exists in workspace
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      boolean moduleExists
        (in string workspaceName, in ModuleIDStruct moduleID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Return true iff module exists in repository.
       *
       * @param  moduleID identifier of module to lookup
       * @return true iff module exists in repository
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      boolean moduleExistsInRepository
        (in ModuleIDStruct moduleID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Using the fields in newValue, modify the module indicated in toModify.
       * It is important to note that all of the user-modifiable fields must be
       * set -- if you leave comments null, for example, you'll overwrite the
       * comments in the database to null. For best results, get current info
       * from the database first, modify selected fields, then call this method.
       * <p>Events: {ModuleChanged} ModuleRenamed
       *
       * @param workspaceName workspace containing the module to be modified
       * @param toModify identifier of the module to be modified
       * @param newValue contains fields to modify
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void modifyModule
        (in string workspaceName, in ModuleIDStruct toModify, in ConfigModuleStruct newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Modify the comments of an item in the workspace. Checks first to see
       * whether comments are different from those of existing item and does
       * nothing if they are not different.
       * <p>Events: *Changed
       *
       * @param workspaceName name of workspace in which to find toModify
       * @param toModify ID of module to modify
       * @param newValue nonnull new value for comments
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void modifyModuleComments
        (in string workspaceName, in ModuleIDStruct toModify, in string newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Modify the name of the module toModify giving it the name newValue.
       * This method will touch every item in toModify as well as every item
       * that references toModify or its offspring.
       * <p>Events: {*Changed | *Renamed}
       *
       * @param  workspaceName non-null workspace in which to find toModify
       * @param  toModify module to change
       * @param  newValue new name for module
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void modifyModuleName
        (in string workspaceName, in ModuleIDStruct toModify, in string newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Touch the item in the workspace, forcing a new revision if necessary
       * <p>Events: {*Changed}
       *
       * @param  workspaceName nonnull workspace name in which to find item
       * @param  itemToTouchID identifier of module to be touched
       * @param  recursive set true if you want to touch items dependent on
       * moduleID, recursively
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void touchModule (in string workspaceName, in ModuleIDStruct itemToTouchID, in boolean recursive)
          raises (ConfigAPIException, TaskKilledException);
    };
/**
 * @}
 * end Configuration
 */
  };
};
#endif //INC_CONFIGSERVER_API_MODULE_IDL

