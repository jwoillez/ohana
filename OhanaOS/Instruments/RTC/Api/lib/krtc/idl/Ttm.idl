/*
 * $RCSfile: Ttm.idl,v $
 * $Revision: 1.6.2.10 $
 * $Date: 2007/10/23 00:38:22 $
 */

/**
 * @file:
 * Interface definition for the KRTC Star Tracker.
 *
 * @author Erik Hovland
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002-2004, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.6.2.10 $
 * @date $Date: 2007/10/23 00:38:22 $
 */

#ifndef INC_TTM_IDL
#define INC_TTM_IDL


#include <RTCCore.idl>

/* pragma always comes after the RTC idl or it will break some things */
#pragma prefix "keck.jpl.nasa.gov"

module TtmModule {

  /**
   * @enum SERVO_MODE
   * An enumerated type to describe the different servo modes of the
   * tip tilt mirror control gizmo.
   */
  enum SERVO_MODE { SM_IDLE,  ///< The TTM is in idle mode (just handling star tracker targets).
                    SM_TRACK, ///< The TTM is in tracking mode
                    SM_OFF    ///< The TTM servo is off and the TTM is not performing any tasks
                  };
  typedef sequence<SERVO_MODE> SERVO_MODE_LIST;

  /**
   * @enum TRACK_CTLR_MODE
   * An enumerated type to describe the different track controller modes of the
   * tip tilt mirror control gizmo.
   */
  enum TRACK_CTLR_MODE { TCM_CHECK,        ///< Track controller is checking if the threshold of the intensity on the on-trak
                         TCM_TRACK,        ///< Track controller is tracking.
                         TCM_CHECK_TIMEOUT ///< Track controller has timed out waiting for the intensity to reach the configured threshold.
                       };
  typedef sequence<TRACK_CTLR_MODE> TRACK_CTLR_MODE_LIST;

  /**
   * Rotation matrix used when updating the TTM's internal matrices.
   */
  typedef double Matrix[2][2];

  /**
   * @interface Ttm Ttm.idl TtmC.h
   *
   * The CORBA interface to the tip tilt mirror controller. This interface
   * provides the necesssary access for users to command the TTM to perform
   * it's control functions.
   */
  interface Ttm : RTCCore::RTCObject {
   
    /**
     * @fn Ttm::On()
     *
     * Put TTM servo into the scheduler and begin operating in
     * in 'idle' mode. Only useful if the gizmo has been shut off.
     */
    void On();

    /**
     * Take the TTM servo out of the scheduler and prepare any devices
     * for shutdown.
     */
    void Off();

    /**
     * Puts Ttm servo in an idle mode. The TTM is still actuating star
     * tracker targets and collecting sensor data but is not exercising
     * any control of it's own.
     */
    void Idle();

    /**
     * Track the target read from the sensors. Parametric Oscillation
     * control is done as well.
     */
    void Track();

    /**
     * Set the TTM actuators to an absolute position.
     * @param NewX X coordinate of the new actuator position.
     * @param NewY Y coordinate of the new actuator position.
     */
    void SetTtms(in double NewX, in double NewY);

    /**
     * Select system id mode to run. Used only to run in a test mode that would
     * allow users to determine what the correct operating parameters were for
     * the controller.
     * @param SysIdMode A short value determining which system id mode a user
     * wants the TTM in.
     * 0 = system id off
     * 1 = closed loop system id mode
     * 2 = open loop system id mode
     * 3 = plant sym system id mode
     */
    void SetSysIdMode(in short SysIdMode);

    /**
     * Provide a user interface to change the rotation matrix of the TTM that
     * determines the rotation from detector to actuator space.
     */
    void SetRotMtx(in Matrix NewRotMtx);

    /**
     * Provide user interface to change the Actuator gain
     * @param NewGain The new gain in counts/sensor points.
     */
    void SetTtmGain(in double NewGain);

    /**
     * Provide the user to change the azimuth angle that the TTM is using
     * to determine the proper rotation from detector to actuator space.
     * @param TelAz The telescope azimuth in radians.
     */
    void SetAzimuth(in double TelAz);

    /**
     * Turn on TTM PZT dither in X direction
     */
    void EnableDitherX ();
    /**
     * Turn off TTM PZT dither in X direction
     */
    void DisableDitherX ();

    /**
     * Turn on TTM PZT dither in Y direction
     */
    void EnableDitherY ();
    /**
     * Turn off TTM PZT dither in Y direction
     */
    void DisableDitherY ();

    /**
     * Provide the TTM PZT with an offset in the X direction
     */
    void OffsetPztX (in double Offset);
    /**
     * Provide the TTM PZT with an offset in the Y direction
     */
    void OffsetPztY (in double Offset);
    /**
     * Zero out the TTM PZT in the X direction
     */
    void ZeroPztX ();
    /**
     * Zero out the TTM PZT in the Y direction
     */
    void ZeroPztY ();

    /**
     * When used the TTM will actuate PZTs associated to the Nuller. The PZTs
     * will be given a target constructed from the KAT target just like the
     * regular actuators. Effective in providing pointing control for the Nuller.
     */
    void EnablePzt ();

    /**
     * When used the TTM will not actuate the PZTs associated to the Nuller.
     * @see TtmModule::Ttm::EnablePzt ()
     */
    void DisablePzt ();
    /**
     * Enable split actuation
     */
    void EnableSplitAct();
    /**
     * Disable split actuation
     */
    void DisableSplitAct();
    /**
     * Set the TTM SLOW actuators to an absolute position.
     * @param NewX X coordinate of the new actuator position.
     * @param NewY Y coordinate of the new actuator position.
     */
    void SetTtmSlow(in double NewX, in double NewY);

    /**
     * Returns the current values set for the TTM SLOW actuators.
     * @param X X coordinate of the actuator position.
     * @param Y Y coordinate of the actuator position.
     */
    void GetTtmSlow(out double X, out double Y);


    /**
     * Set the TTM actuators to a relative position.
     * @param IncrX X increment for the new actuator position.
     * @param IncrY Y increment for the new actuator position.
     */
    void SetTtmIncrSlow(in double IncrX, in double IncrY);
  };

};

#endif // INC_TTM_IDL
