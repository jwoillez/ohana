/*
 * $RCSfile: ConfigAPIStructsBase.idl,v $
 * $Revision: 1.2 $
 * $Date: 2007/09/27 23:25:58 $
 */

/**
 * @file
 * The definitions of ConfigServer structs.
 * @ingroup Configuration
 *
 * @author Michael Deck
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:25:58 $
 */

#ifndef INC_CONFIGSERVER_STRUCTSBASE_IDL
#define INC_CONFIGSERVER_STRUCTSBASE_IDL
#pragma prefix "rtc.jpl.nasa.gov"

#include "Range.idl"
#include "Name.idl"
#include "Configuration.idl"
#include "ConfigAPICommon.idl"
#include "ConfigAPIEnums.idl"

#include <CosEventComm.idl>
#include <CosEventChannelAdmin.idl>

module RTC {
  module Configuration {
    /**
     * @addtogroup Configuration
     * @{
     */

    /**
     * A database server.
     */
    struct DatabaseServerStruct
    {
      /**
       * The host domain name of the server.
       * Ideally the host name is a fully-qualified domain name;
       * however it is not required to be.
       */
      string host;
      DatabaseVendor vendor; ///< The database vendor
      string port;           ///< Port number the server listens on
    };

    /**
     * A database.
     */
    struct DatabaseStruct
    {
      DatabaseServerStruct server; ///< The database server used
      string databaseName;         ///< The database name on the server
      string userName;             ///< The user name on the server
      boolean passwordNeeded;
      ///< true iff a password is needed to access this database
    };

    /**
     * A database connection.
     */
    struct DatabaseConnectionStruct
    {
      DatabaseStruct database;     ///< The database used
      string password;             ///< The password to use, if needed
      boolean isReadOnly;          ///< Is/should the connection be readonly?
    };

    struct ConfigServerIDStruct
    {
      string projectName;    ///< in NameServer, the highest-level context
      string serverName;
      ///< in NameServer, the 3rd-level context (below projectName and
      ///< "Configuration"
      DatabaseConnectionStruct databaseConnection;
      ///< The database connection used
      string nameServerName; ///< result of ORBInitRef.NameService
    };

    struct VersionIDStruct
    {
      string versionName; ///< the name of the version
    };

    /**
     * The branch and sticky tag are sequences interpreted as a optional
     * version ID. If zero length, it is treated as a null; otherwise the
     * first element is read as the version ID and other elements
     * are ignored.
     */
    typedef sequence<VersionIDStruct,1> OptionalVersionID;

    /**
     * Most items will have an optional "sticky" date. Using a sequence,
     * we treat an empty sequence as a null sticky-date. Otherwise the
     * first item of the sequence is the sticky date using ISO string encoding
     * and others are ignored.
     */
    typedef sequence<string,1> OptionalStickyDateString;

    struct ModuleIDStruct
    {
      string moduleName;  ///< the name of the module
    };

    /**
     * The containerID is a sequence interpreted as a optional
     * item. If zero length, it is treated as a null; otherwise the
     * first element is read as the item container and other elements
     * are ignored.
     */
    struct ClassOrMemberIDStruct
    {
      ModuleIDStruct moduleID;
      ///< the module to which this class or member belongs
      RTC::NameType containerID; ///< names of container classes in this module
      string memberName;         ///< the class or member name
    };

    /**
     * The containerID is a sequence interpreted as a optional
     * item. If zero length, it is treated as a null; otherwise the
     * first element is read as the item type and other elements
     * are ignored.
     */
    struct InstanceOrMemberIDStruct
    {
      ModuleIDStruct moduleID;
      ///< the module to which this instance or member belongs
      RTC::NameType containerID; ///< optional container if this is a member
      string memberName;         ///< the instance or member name
    };

    struct QueryIDStruct
    {
      string queryName; ///< the query name
    };
    /**
     * @}
     * end Configuration
     */
  };
};
#endif //INC_CONFIGSERVER_STRUCTSBASE_IDL

