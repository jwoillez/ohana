/*
 * $RCSfile: ConfigAPIClassOrMember.idl,v $
 * $Revision: 1.2 $
 * $Date: 2007/09/27 23:25:55 $
 */

/**
 * @file
 * The interface definition for the ConfigAPIClassOrMember server.
 * @ingroup Configuration
 *
 * @author Michael Deck
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:25:55 $
 */

#ifndef INC_CONFIGSERVER_API_CLASS_OR_MEMBER_IDL
#define INC_CONFIGSERVER_API_CLASS_OR_MEMBER_IDL
#pragma prefix "rtc.jpl.nasa.gov"

#include "ConfigAPICommon.idl"
#include "ConfigAPIEnums.idl"
#include "ConfigAPIExceptions.idl"
#include "ConfigAPIStructs.idl"

module RTC {

  module Configuration {
    /**
     * @addtogroup Configuration
     * @{
     */
    /**
     * Defines operations mostly having to do with classes and class-members.
     */
    interface ConfigAPIClassOrMember
    {
      /**
        * Add a class or member to the repository in the provided workspace
        * if it does not already exist in workspace or repository.
        * newClassOrMember.memberName and newClassOrMember.branch must
        * be set. Other attributes are optional and have defaults.
        * <p>Events: ClassAdded
        *
        * @param workspaceName name of workspace to add class or member to
        * @param newClassOrMember class or member to add
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void addClassOrMember
        (in string workspaceName, in ConfigClassStruct newClassOrMember)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Return true iff class or member exists in workspace.
        *
        * @param  workspaceName name of workspace to look for class or member in
        * @param  classOrMemberID identifier of class or member to lookup
        * @return true iff class or member exists in workspace
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      boolean classOrMemberExists
        (in string workspaceName, in ClassOrMemberIDStruct classOrMemberID)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Remove a class or member and all contained members in the workspace.
        * When a class is deleted, delete all members as well as all subtypes and
        * instances. When an instance is deleted, delete all members and reset all
        * links-to to default.
        * <p>Events: {{{InstanceModified} InstanceDeleted} ClassDeleted}
        *
        * @param  workspaceName name of the workspace to delete class or member from
        * @param  toDeleteID class or member to delete
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void deleteClassOrMember
        (in string workspaceName, in ClassOrMemberIDStruct toDeleteID)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Get array of fully-attributed (without extended status) class members in class.
        *
        * @param  workspaceName workspace to look for class and members in
        * @param  classID class to look for members in
        * @return array of fully-attributed (without extended status) members in class
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      ClassList getClassMembersInClassOrMember
        (in string workspaceName,  in ClassOrMemberIDStruct classID)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Gets the fully-attributed info of the class or member but not extended status.
        * Attributes are not necessarily fully-attributed.
        *
        * @param  workspaceName name of the workspace to lookup class or member in
        * @param  classID class or member to lookup
        * @return  fully-attributed class or member struct without extended status
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      ClassOrMemberInfoStruct getClassOrMemberAttributes
        (in string workspaceName,  in ClassOrMemberIDStruct classID)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Get the extended status of the class or member.
        *
        * @param workspaceName name of the workspace to look for class or member in
        * @param classOrMemberID ID of class or member to lookup extended status
        * @return extended status
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      ItemRevisionStatus getClassOrMemberExtendedStatus
        (in string workspaceName, in ClassOrMemberIDStruct classOrMemberID)
          raises (ConfigAPIException, TaskKilledException);
      /**
        * Get the log records associated with the class or member.
        *
        * @param workspaceName name of the workspace to look for class or member in
        * @param toLookup ID of class or member to lookup
        * @return sequence of ItemLogInfoStruct containing log records for this class or member
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      ItemLogInfoList getClassOrMemberLogInfo (in string workspaceName, in ClassOrMemberIDStruct toLookup)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Return the collection of items, fully-qualified without extended status,
        * that are directly dependent on the class or member, such as members of
        * the class, children or instances of the class or member.
        *
        * @param workspaceName name of the workspace to lookup class or member and references in
        * @param toLookup identifier of the class or member to lookup
        * @return collection of fully-qualified (without extended status) items
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      ItemList getItemsDependentOnClassOrMember (in string workspaceName, in ClassOrMemberIDStruct toLookup)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Get all the modules that toLookup depends on, directly or indirectly.
        *
        * @param workspaceName name of workspace to look in
        * @param toLookup name of class or member to get dependencies on
        * @return set of fully-attributed modules
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      ModuleList getModulesClassOrMemberDependsOn (in string workspaceName, in ClassOrMemberIDStruct toLookup)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Return the primitive ancestor of toLookup. If
        * toLookup is a subclass of Enumeration, return it; otherwise if it
        * is a subclass of a primitive type, return the primitive type; otherwise
        * return null.

        * @param workspaceName workspace to look for class or member in
        * @param toLookup class or member to lookup primitive ancestor of
        * @return the primitive ancestor of toLookup
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
      ClassOrMemberIDStruct getPrimitiveAncestor
        (in string workspaceName, in ClassOrMemberIDStruct toLookup)
        raises (ConfigAPIException, TaskKilledException);
        */

      /**
        * Return a sequence of fully-attributed items including everything that refers to toLookup by
        * instance type, class type, or parent.
        *
        * @param workspaceName workspace to look for items in
        * @param toLookup item ID to get references to
        * @return sequence of fully-attributed items
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      ItemList getReferencesToClassOrMember (in string workspaceName, in ClassOrMemberIDStruct toLookup)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Get all the subtypes (direct and indirect) of toLookup, all fully-attributed.
        *
        * @param  workspaceName name of workspace
        * @param  toLookup class to get subtypes of
        * @return  the subtypes (direct and indirect) of toLookup all fully-attributed
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      ClassList getSubtypesOfType (in string workspaceName, in ClassOrMemberIDStruct toLookup)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Set the instantiable attribute of class or member toModify to value newValue.
        * If making a class non-instantiable, delete any instances of class in workspace.
        * <p>Events: ClassChanged {InstanceDeleted}
        *
        * @param workspaceName workspace to find toModify in
        * @param toModify item to change
        * @param newValue new value of the attributed
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassInstantiable
        (in string workspaceName,  in ClassOrMemberIDStruct toModify, in boolean newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Using the fields in newValue, modify the class or member indicated in
        * toModify. It is important to note that all of the user-modifiable fields
        * must be set -- if you leave comments null, for example, you'll overwrite
        * the comments in the database to null. For best results, get current info
        * from the database first, modify selected fields, then call this method.
        * <p>Events: {ClassOrMemberChanged} ClassOrMemberRenamed
        *
        * @param workspaceName workspace containing the class or member to be modified
        * @param toModify identifier of the class or member to be modified
        * @param newValue contains fields to modify
        * @param coerceValues set true if you want to force value strings to conform to type, and
        * just get a warning; false to fail if strings do not conform
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMember
        (in string workspaceName,  in ClassOrMemberIDStruct toModify,
         in ConfigClassStruct newValue, in boolean coerceValues)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Set the comments attribute of class or member toModify to value newValue.
        * If making a class non-instantiable, delete any instances of class in workspace.
        * <p>Events: ClassChanged
        *
        * @param workspaceName workspace to find toModify in
        * @param toModify item to change
        * @param newValue new value of the attribute
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMemberComments
        (in string workspaceName,  in ClassOrMemberIDStruct toModify, in string newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Set the default size attribute of class or member toModify to value newValue. This may
        * force instances to be resized (adds/deletes) as well.
        * <p>Events: ClassChanged {InstanceChanged | InstanceAdded | InstancedDeleted}
        *
        * @param workspaceName workspace to find toModify in
        * @param toModify item to change
        * @param newValue new value of the attribute
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMemberDefaultSize
        (in string workspaceName,  in ClassOrMemberIDStruct toModify, in long newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Set the default value attribute of class or member toModify to value newValue.
        * [ConfigAPIClassOrMember]
        * <p>Events: ClassChanged
        *
        * @param workspaceName workspace to find toModify in
        * @param toModify item to change
        * @param newValue new value of the attribute
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMemberDefaultValue
        (in string workspaceName,  in ClassOrMemberIDStruct toModify, in AnyOrNull newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Set the enumeration helper and name attributes of class or member toModify.
        * <p>Events: ClassChanged
        *
        * @param workspaceName workspace to find toModify in
        * @param toModify item to change
        * @param enumerationHelper new value of the enumerationHelper attribute
        * @param enumerationName new value of the enumerationName attribute
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMemberEnumerationInfo
        (in string workspaceName,  in ClassOrMemberIDStruct toModify,
         in string enumerationHelper, in string enumerationName)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Set the preferred display format of class or member toModify.
        * <p>Events: ClassChanged
        *
        * @param workspaceName workspace to find toModify in
        * @param toModify item to change
        * @param newValue new value of the attribute
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMemberFormat
        (in string workspaceName,  in ClassOrMemberIDStruct toModify, in FormatSelection newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Set the object-kind attribute of the given class or member.
        * May cause instance add/delete/change.
        * @todo note in comment what strategy is used for the cascade.
        * <p>Events: ClassChanged {InstanceAdded | InstanceChanged | InstanceDeleted}
        *
        * @param workspaceName workdpace to find toModify in
        * @param toModify item to change
        * @param newValue new value of the attribute
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMemberKind
        (in string workspaceName,  in ClassOrMemberIDStruct toModify, in ObjectKind newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Set the lower limit attribute of class or member toModify to value newValue.
        * <p>Events: ClassChanged
        *
        * @param workspaceName workspace to find toModify in
        * @param toModify item to change
        * @param newValue new value of the attribute
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMemberLowerLimit
        (in string workspaceName,  in ClassOrMemberIDStruct toModify, in AnyOrNull newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Modify the name of a class or member in the workspace.
        * This will touch every item directly dependent on the class or member as well as every
        * item contained in this class or member.
        * <p>Events: {ClassChanged | InstanceAdded | InstanceChanged | InstanceDeleted}
        *
        * @param workspaceName workspace to find toModify in
        * @param toModify item to change
        * @param newValue new value of the attribute
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMemberName
        (in string workspaceName,  in ClassOrMemberIDStruct toModify, in string newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Modify the type attribute of the given class or member. Coerce default value, lower limit, and
        * upper limit to new type if primitive. May cause instance add/delete/change.
        * @todo note in coment what strategy is used for the cascade.
        * <p>Events: {ClassChanged | InstanceAdded | InstanceChanged | InstanceDeleted}
        *
        * @param workspaceName workspace to find toModify in
        * @param toModify item to change
        * @param newValue new value of the attribute
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMemberType
        (in string workspaceName,  in ClassOrMemberIDStruct toModify, in ClassOrMemberIDStruct newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Modify the units attribute of the given class or member.
        * <p>Events: ClassChanged
        *
        * @param workspaceName workspace to find toModify in
        * @param toModify item to change
        * @param newValue new value of the attribute
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMemberUnits
        (in string workspaceName,  in ClassOrMemberIDStruct toModify, in string newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Set the upper limit attribute of class or member toModify to value newValue.
        * <p>Events: ClassChanged
        *
        * @param workspaceName workspace to find toModify in
        * @param toModify item to change
        * @param newValue new value of the attribute
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void modifyClassOrMemberUpperLimit
        (in string workspaceName,  in ClassOrMemberIDStruct toModify, in AnyOrNull newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Touch the item in the workspace, forcing a new revision if necessary
        * <p>Events: {*Changed}
        *
        * @param  workspaceName nonnull workspace name in which to find item
        * @param  itemToTouchID identifier of module to be touched
        * @param  recursive set true if you want to touch items dependent on itemToTouchID, recursively
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void touchClassOrMember
        (in string workspaceName, in ClassOrMemberIDStruct itemToTouchID, in boolean recursive)
          raises (ConfigAPIException, TaskKilledException);

    };
    /**
     * @}
     * end Configuration
     */
  };
};
#endif //INC_CONFIGSERVER_API_CLASS_OR_MEMBER_IDL

