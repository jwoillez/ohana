/* $Source: /usr/local/cvsroot/kroot/kss/if/rtc/idl/ManagedObject.idl,v $
 * $Id: ManagedObject.idl,v 1.2 2007/09/27 23:26:01 intdev Exp $
 * -*- Mode: c++ -*-
 */

/**
 * @file
 * The interface definition for RTC::ManagedObject.
 *
 * @author Richard Johnson
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:26:01 $
 */


#ifndef INC_RTC_MANAGED_OBJECT_IDL
#define INC_RTC_MANAGED_OBJECT_IDL

#pragma prefix "rtc.jpl.nasa.gov"

#include "Destructible.idl"

module RTC {

  /**
   * ManagedObjects are the fundamental building blocks of an RTC  system.
   * Specialized ManagedObject implementations are entities that
   * perform servo control of hardware, respond to client commands, and
   * generate telemetry etc.  Specialized ManagedObjects may implement
   * interfaces derived from ManagedObject that specify a richer command
   * interface specific to the type of control the object provides.
   * Each type of ManagedObject has and associated ObjectFactory
   * implementation capable of creating new ManagedObjects
   * (See RTC::ObjectFactory::Create).  Typically, the specific
   * ManagedObject and associated ObjectFactory are built into a shared
   * library that is then dynamically loaded onto the CPUManager using the
   * RTC::DynamicLoader service.
   *
   * Every ManagedObject has an Id consisting of a string name and type.
   * This id is used by object factories to create ManagedObjects.
   * For a given CPU object ids must by unique.
   *
   * Previously created ManagedObjects can be located using the
   * RTC::ObjectFinder service if made available by the CPUManager
   * implementation (See ObjectFinder.idl).
   */
  interface ManagedObject : RTC::Destructible {

    /// Id structure
    struct Id {
      string Name;  ///< Name of the object
      string Type;  ///< Type of the object
    };

    typedef sequence<Id> IdSequenceType;

    /// @return The RtObject id
    Id Identity();
  };

  /// Sequence of ManagedObject references
  typedef sequence<ManagedObject> ManagedObjectSequenceType;
};

#endif
