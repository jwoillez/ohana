/**
 * $RCSfile: ConfigAPIQuery.idl,v $
 * $Revision: 1.2 $
 * $Date: 2007/09/27 23:25:57 $
 */

/**
 * @file
 * The interface definition for the ConfigAPIQuery server.
 * @ingroup Configuration
 *
 * @author Michael Deck
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:25:57 $
 */

#ifndef INC_CONFIGSERVER_API_QUERY_IDL
#define INC_CONFIGSERVER_API_QUERY_IDL
#pragma prefix "rtc.jpl.nasa.gov"

#include "ConfigAPICommon.idl"
#include "ConfigAPIEnums.idl"
#include "ConfigAPIExceptions.idl"
#include "ConfigAPIStructs.idl"

module RTC {
  module Configuration {
/**
 * @addtogroup Configuration
 * @{
 */

    /**
     * Defines operations mostly on queries.
     */
    interface ConfigAPIQuery
    {
      /**
       * Add a query to the repository in the provided workspace if it does not
       * already exist in workspace or repository. queryToAdd.name and
       * queryToAdd.branch must be set. Other attributes are optional and have
       * defaults.
       * <p>Events: QueryAdded
       *
       * @param workspaceName name of workspace to add query to
       * @param queryToAdd query to add
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void addQuery
        (in string workspaceName, in ConfigQueryStruct queryToAdd)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Remove a query from the workspace by marking it locally-removed.
       * <p>Events: QueryDeleted
       *
       * @param  workspaceName name of the workspace to delete query from
       * @param  queryID query to delete
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void deleteQuery
        (in string workspaceName, in QueryIDStruct queryID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Return fully-qualified primitive instances resulting from the
       * requested query.
       *
       * @param workspaceName workspace to look for query and items in
       * @param toLookup query to lookup primitives of
       * @return sequence of fully-qualified primitive instances
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      InstanceList getElementSetQueryPrimitiveItems
        (in string workspaceName, in QueryIDStruct toLookup)
        raises (ConfigAPIException, TaskKilledException);

      /**
       * Return unattributed items matching the requested search query.
       * @param workspaceName workspace to look for query and items in
       * @param toQuery query to lookup items of, need not be already stored
       * @return sequence of unattributed items
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      ItemIterator getItemsMatchingQuery
        (in string workspaceName, in ConfigQueryStruct toQuery)
        raises (ConfigAPIException, TaskKilledException);

      /**
       * Return array of fully-attributed (without extended status) queries in
       * workspace.
       *
       * @param  workspaceName
       * @return  array of fully-attributed (without extended status) queries in
       * workspace
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      QueryList getQueries
        (in string workspaceName)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Gets the fully-attributed info of the query but not extended status.
       *
       * @param  workspaceName name of the workspace to lookup query in
       * @param  queryID query to lookup
       * @return  fully-attributed query struct without extended status
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      QueryInfoStruct getQueryAttributes
        (in string workspaceName, in QueryIDStruct queryID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Get the extended status of the query.
       *
       * @param workspaceName name of the workspace to look for query in
       * @param queryID ID of query to lookup extended status
       * @return extended status
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      ItemRevisionStatus getQueryExtendedStatus (in string workspaceName, in QueryIDStruct queryID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Get the log records associated with the query
       *
       * @param workspaceName name of the workspace to look for query in
       * @param queryID ID of query to lookup
       * @return sequence of ItemLogInfoStruct containing log records for this query
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      ItemLogInfoList getQueryLogInfo (in string workspaceName, in QueryIDStruct queryID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Using the fields in newValue, modify the query indicated in toModify.
       * It is important to note that all of the user-modifiable fields must be
       * set -- if you leave comments null, for example, you'll overwrite the
       * comments in the database to null. For best results, get current info
       * from the database first, modify selected fields, then call this method.
       * <p>Events: {QueryChanged} QueryRenamed
       *
       * @param workspaceName workspace containing the query to be modified
       * @param toModify identifier of the query to be modified
       * @param newValue contains fields to modify
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void modifyQuery
        (in string workspaceName, in QueryIDStruct toModify, in ConfigQueryStruct newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Modify the comments of an item in the workspace. Checks first to see
       * whether comments are different from those of existing item and does
       * nothing if they are not different.
       * <p>Events: *Changed
       *
       * @param workspaceName name of workspace in which to find toModify
       * @param toModify ID of query to modify
       * @param newValue nonnull new value for comments
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void modifyQueryComments
        (in string workspaceName, in QueryIDStruct toModify, in string newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Modify the definition of an item in the workspace. Checks first to see
       * whether definitions are different from those of existing item and does
       * nothing if they are not different.
       * <p>Events: QueryChanged
       *
       * @param workspaceName name of workspace in which to find toModify
       * @param toModify ID of query to modify
       * @param newValue nonnull new value for definition
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void modifyQueryDefinition
        (in string workspaceName, in QueryIDStruct toModify, in string newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Modify the name of the query toModify giving it the name newValue.
       * <p>Events: QueryRenamed
       *
       * @param  workspaceName non-null workspace in which to find toModify
       * @param  toModify query to change
       * @param  newValue new name for query
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void modifyQueryName
        (in string workspaceName, in QueryIDStruct toModify, in string newValue)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Return true if query exists in workspace.
       *
       * @param  workspaceName name of workspace to look for query in
       * @param  queryID identifier of query to lookup
       * @return true iff query exists in workspace
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      boolean queryExists
        (in string workspaceName, in QueryIDStruct queryID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Return true if query exists in repository.
       *
       * @param  queryID identifier of query to lookup
       * @return true iff query exists in repository
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      boolean queryExistsInRepository
        (in QueryIDStruct queryID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Touch the item in the workspace, forcing a new revision if necessary
       * <p>Events: {*Changed}
       *
       * @param  workspaceName nonnull workspace name in which to find item
       * @param  itemToTouchID identifier of query to be touched
       * @param  recursive set true if you want to touch items dependent on
       * queryID, recursively
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void touchQuery (in string workspaceName, in QueryIDStruct itemToTouchID, in boolean recursive)
          raises (ConfigAPIException, TaskKilledException);

    };
/**
 * @}
 * end Configuration
 */
  };
};
#endif //INC_CONFIGSERVER_API_QUERY_IDL

