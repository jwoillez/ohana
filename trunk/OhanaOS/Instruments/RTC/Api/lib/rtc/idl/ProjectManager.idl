/* $Source: /usr/local/cvsroot/kroot/kss/if/rtc/idl/ProjectManager.idl,v $
 * $Id: ProjectManager.idl,v 1.2 2007/09/27 23:26:02 intdev Exp $
 * -*- Mode: c++ -*-
 */

/**
 * @file
 * The interface definition for RTC::ProjectManager.
 *
 * @author Richard Johnson
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:26:02 $
 */

#ifndef INC_PROJECT_MANAGER_IDL
#define INC_PROJECT_MANAGER_IDL


#include "Destructible.idl"
#include "Versionable.idl"
#include "CPUManager.idl"
#include "ConfigAPIFactory.idl"
#include "TelemetryServer.idl"


#pragma prefix "rtc.jpl.nasa.gov"

module RTC {

  /**
   * The Project Manager is the top level interface  RTC object for a given
   * deployment of an RTC control system.  In general an RTC control system
   * consists of one or more distributed CPU Managers,
   * a configuration API factory, and a telemetry server.
   * CPU Managers are responsible for hosting various control services and
   * objects. The exact nature of these services and objects depends on
   * the specific deployment and design.
   * The Configuration API Factory allows users to interact with a "database"
   * of configuration inforamation.  This information is can be used by
   * objects to initialize and save persistent state.
   * The Telemetry Server provides a publish/subcribe center for all
   * distributed telemetry.
   * Client applications such as GUIs, archivers etc. interact with the
   * ProjectManager object to discover these basic RTC system components.
   */
  interface ProjectManager : Destructible, Versionable {

    // Object in question is not found
    exception NotFound {};

    /**
     * Add a CPU Manager to the project manager list.
     * @param Mgr The CPU Manager to add
     */
    void AddCpuManager(in CpuManager Mgr);

    /**
     * Remove CPU Manager from the project manager list.
     * @param Id The Id of the CPU Manager to remove
     * @throw NotFound If CPU Manager with -a Id does not exist
     */
    void RemoveCpuManager(in CpuManager::Id Id) raises (NotFound);

    /**
     * Get a list of all CPU Manager known to the Project Manager.
     * @return Sequence of CPU Manager object references
     */
    CpuManagerSequenceType ListCpuManagers();

    /**
     * Get a CPU Manager object by Id.
     * @param Id Id of the CPU Manager to locate
     * @throw NotFound If CPU Manager with -a Id does not exist
     * @return CpuManager object reference
     */
    CpuManager FindCpuManager(in CpuManager::Id Id) raises (NotFound);

    /**
     * Set the configuration API factory for the project.  There
     * can only be one of these per project manager so subsequent calls
     * replace older API factories.
     * @note This operation exists for completeness as is likely that the
     * implementation application will be able to set this directly.
     * @param Factry The configuration API factory for the project
     */
    void SetConfigApiFactory(in Configuration::ConfigAPIFactory Factry);

    /**
     * Get the configuration API factory for the project manager if one
     * exists.
     * @throw NotFound If no API factory is associated with the project
     * manager.
     * @return ConfigAPIFactory object reference
     */
    Configuration::ConfigAPIFactory GetConfigApiFactory() raises (NotFound);

    /**
     * Set the telemetry server for the project. There
     * can only be one of these per project manager so subsequent calls
     * replace older telemetry servers.
     * @note This operation exists for completeness as is likely that the
     * implementation application will be able to set this directly.
     * @param Server Telemetry server for the project
     */
    void SetTelemetryServer(in Telemetry::Server Server);

    /**
     * Get the telemetry serverfor the project manager if one
     * exists.
     * @throw NotFound If no telemetry serveris associated with the project
     * manager.
     * @return TelemetryServer object reference
     */
    Telemetry::Server GetTelemetryServer() raises (NotFound);
  };
};

#endif
