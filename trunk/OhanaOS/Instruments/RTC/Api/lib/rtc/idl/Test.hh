// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __Test_hh__
#define __Test_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_Test
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_Test
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_Test
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE myM

_CORBA_MODULE_BEG

  struct myS {
    typedef _CORBA_ConstrType_Fix_Var<myS> _var_type;

    
    ::CORBA::Boolean myB;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef myS::_var_type myS_var;

  typedef myS& myS_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_myS;

#ifndef __myM_mmyI__
#define __myM_mmyI__

  class myI;
  class _objref_myI;
  class _impl_myI;
  
  typedef _objref_myI* myI_ptr;
  typedef myI_ptr myIRef;

  class myI_Helper {
  public:
    typedef myI_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_myI, myI_Helper> myI_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_myI,myI_Helper > myI_out;

#endif

  // interface myI
  class myI {
  public:
    // Declarations for this interface type.
    typedef myI_ptr _ptr_type;
    typedef myI_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum myE { E1 /*, __max_myE=0xffffffff */ };
    typedef myE& myE_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_myE;

  
  };

  class _objref_myI :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void myS();
    void myC(const myS& myP);
    void myD(myI::myE myQ);

    inline _objref_myI()  { _PR_setobj(0); }  // nil
    _objref_myI(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_myI();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_myI(const _objref_myI&);
    _objref_myI& operator = (const _objref_myI&);
    // not implemented

    friend class myI;
  };

  class _pof_myI : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_myI() : _OMNI_NS(proxyObjectFactory)(myI::_PD_repoId) {}
    virtual ~_pof_myI();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_myI :
    public virtual omniServant
  {
  public:
    virtual ~_impl_myI();

    virtual void myS() = 0;
    virtual void myC(const myS& myP) = 0;
    virtual void myD(myI::myE myQ) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_myI;

_CORBA_MODULE_END



_CORBA_MODULE POA_myM
_CORBA_MODULE_BEG

  class myI :
    public virtual myM::_impl_myI,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~myI();

    inline ::myM::myI_ptr _this() {
      return (::myM::myI_ptr) _do_this(::myM::myI::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_myM
_CORBA_MODULE_BEG

_CORBA_MODULE_END



template <class _omniT>
class POA_myM_myI_tie : public virtual POA_myM::myI
{
public:
  POA_myM_myI_tie(_omniT& t)
    : pd_obj(&t), pd_poa(0), pd_rel(0) {}
  POA_myM_myI_tie(_omniT& t, ::PortableServer::POA_ptr p)
    : pd_obj(&t), pd_poa(p), pd_rel(0) {}
  POA_myM_myI_tie(_omniT* t, _CORBA_Boolean r=1)
    : pd_obj(t), pd_poa(0), pd_rel(r) {}
  POA_myM_myI_tie(_omniT* t, ::PortableServer::POA_ptr p,_CORBA_Boolean r=1)
    : pd_obj(t), pd_poa(p), pd_rel(r) {}
  ~POA_myM_myI_tie() {
    if( pd_poa )  ::CORBA::release(pd_poa);
    if( pd_rel )  delete pd_obj;
  }

  _omniT* _tied_object() { return pd_obj; }

  void _tied_object(_omniT& t) {
    if( pd_rel )  delete pd_obj;
    pd_obj = &t;
    pd_rel = 0;
  }

  void _tied_object(_omniT* t, _CORBA_Boolean r=1) {
    if( pd_rel )  delete pd_obj;
    pd_obj = t;
    pd_rel = r;
  }

  _CORBA_Boolean _is_owner()        { return pd_rel; }
  void _is_owner(_CORBA_Boolean io) { pd_rel = io;   }

  ::PortableServer::POA_ptr _default_POA() {
    if( !pd_poa )  return ::PortableServer::POA::_the_root_poa();
    else           return ::PortableServer::POA::_duplicate(pd_poa);
  }

  void myS() { pd_obj->myS(); }
  void myC(const myM::myS& myP) { pd_obj->myC(myP); }
  void myD(myM::myI::myE myQ) { pd_obj->myD(myQ); }


private:
  _omniT*                   pd_obj;
  ::PortableServer::POA_ptr pd_poa;
  _CORBA_Boolean            pd_rel;
};



#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const myM::myS& _s);
extern void operator<<=(::CORBA::Any& _a, myM::myS* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, myM::myS*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const myM::myS*& _sp);

inline void operator >>=(myM::myI::myE _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (myM::myI::myE& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= myM::myI::E1) {
    _e = (myM::myI::myE) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, myM::myI::myE _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, myM::myI::myE& _s);

void operator<<=(::CORBA::Any& _a, myM::myI_ptr _s);
void operator<<=(::CORBA::Any& _a, myM::myI_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, myM::myI_ptr& _s);



inline void
myM::myI::_marshalObjRef(::myM::myI_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_Test
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_Test
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_Test
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_Test
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_Test
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_Test
#endif

#endif  // __Test_hh__

