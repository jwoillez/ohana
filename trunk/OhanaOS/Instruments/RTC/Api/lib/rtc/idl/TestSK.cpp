// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "Test.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
myM::myS::operator>>= (cdrStream &_n) const
{
  _n.marshalBoolean(myB);

}

void
myM::myS::operator<<= (cdrStream &_n)
{
  myB = _n.unmarshalBoolean();

}

myM::myI_ptr myM::myI_Helper::_nil() {
  return ::myM::myI::_nil();
}

::CORBA::Boolean myM::myI_Helper::is_nil(::myM::myI_ptr p) {
  return ::CORBA::is_nil(p);

}

void myM::myI_Helper::release(::myM::myI_ptr p) {
  ::CORBA::release(p);
}

void myM::myI_Helper::marshalObjRef(::myM::myI_ptr obj, cdrStream& s) {
  ::myM::myI::_marshalObjRef(obj, s);
}

myM::myI_ptr myM::myI_Helper::unmarshalObjRef(cdrStream& s) {
  return ::myM::myI::_unmarshalObjRef(s);
}

void myM::myI_Helper::duplicate(::myM::myI_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

myM::myI_ptr
myM::myI::_duplicate(::myM::myI_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

myM::myI_ptr
myM::myI::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


myM::myI_ptr
myM::myI::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

myM::myI_ptr
myM::myI::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_myI _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_myI* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_myI;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* myM::myI::_PD_repoId = "IDL:myM/myI:1.0";


myM::_objref_myI::~_objref_myI() {
  
}


myM::_objref_myI::_objref_myI(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::myM::myI::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
myM::_objref_myI::_ptrToObjRef(const char* id)
{
  if( id == ::myM::myI::_PD_repoId )
    return (::myM::myI_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::myM::myI::_PD_repoId) )
    return (::myM::myI_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_D46EBDDECBF446BF_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_D46EBDDECBF446BF_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
    
  
  
};

// Local call call-back function.
static void
_0RL_lcfn_D46EBDDECBF446BF_10000000(omniCallDescriptor*, omniServant* svnt)
{
  
  myM::_impl_myI* impl = (myM::_impl_myI*) svnt->_ptrToInterface(myM::myI::_PD_repoId);
  impl->myS();


}

void myM::_objref_myI::myS()
{
  _0RL_cd_D46EBDDECBF446BF_00000000 _call_desc(_0RL_lcfn_D46EBDDECBF446BF_10000000, "myS", 4);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cmyM_mmyS
class _0RL_cd_D46EBDDECBF446BF_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_D46EBDDECBF446BF_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  myM::myS arg_0_;
  const myM::myS* arg_0;
};

void _0RL_cd_D46EBDDECBF446BF_20000000::marshalArguments(cdrStream& _n)
{
  (const myM::myS&) *arg_0 >>= _n;

}

void _0RL_cd_D46EBDDECBF446BF_20000000::unmarshalArguments(cdrStream& _n)
{
  (myM::myS&)arg_0_ <<= _n;
  arg_0 = &arg_0_;

}

// Local call call-back function.
static void
_0RL_lcfn_D46EBDDECBF446BF_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_D46EBDDECBF446BF_20000000* tcd = (_0RL_cd_D46EBDDECBF446BF_20000000*)cd;
  myM::_impl_myI* impl = (myM::_impl_myI*) svnt->_ptrToInterface(myM::myI::_PD_repoId);
  impl->myC(*tcd->arg_0);


}

void myM::_objref_myI::myC(const myS& myP)
{
  _0RL_cd_D46EBDDECBF446BF_20000000 _call_desc(_0RL_lcfn_D46EBDDECBF446BF_30000000, "myC", 4);
  _call_desc.arg_0 = &(myS&) myP;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cmyM_mmyI_mmyE
class _0RL_cd_D46EBDDECBF446BF_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_D46EBDDECBF446BF_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  myM::myI::myE arg_0;
};

void _0RL_cd_D46EBDDECBF446BF_40000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_D46EBDDECBF446BF_40000000::unmarshalArguments(cdrStream& _n)
{
  (myM::myI::myE&)arg_0 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_D46EBDDECBF446BF_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_D46EBDDECBF446BF_40000000* tcd = (_0RL_cd_D46EBDDECBF446BF_40000000*)cd;
  myM::_impl_myI* impl = (myM::_impl_myI*) svnt->_ptrToInterface(myM::myI::_PD_repoId);
  impl->myD(tcd->arg_0);


}

void myM::_objref_myI::myD(myI::myE myQ)
{
  _0RL_cd_D46EBDDECBF446BF_40000000 _call_desc(_0RL_lcfn_D46EBDDECBF446BF_50000000, "myD", 4);
  _call_desc.arg_0 = myQ;

  _invoke(_call_desc);



}
myM::_pof_myI::~_pof_myI() {}


omniObjRef*
myM::_pof_myI::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::myM::_objref_myI(ior, id);
}


::CORBA::Boolean
myM::_pof_myI::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::myM::myI::_PD_repoId) )
    return 1;
  
  return 0;
}

const myM::_pof_myI _the_pof_myM_mmyI;

myM::_impl_myI::~_impl_myI() {}


::CORBA::Boolean
myM::_impl_myI::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "myS") ) {

    _0RL_cd_D46EBDDECBF446BF_00000000 _call_desc(_0RL_lcfn_D46EBDDECBF446BF_10000000, "myS", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "myC") ) {

    _0RL_cd_D46EBDDECBF446BF_20000000 _call_desc(_0RL_lcfn_D46EBDDECBF446BF_30000000, "myC", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "myD") ) {

    _0RL_cd_D46EBDDECBF446BF_40000000 _call_desc(_0RL_lcfn_D46EBDDECBF446BF_50000000, "myD", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
myM::_impl_myI::_ptrToInterface(const char* id)
{
  if( id == ::myM::myI::_PD_repoId )
    return (::myM::_impl_myI*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::myM::myI::_PD_repoId) )
    return (::myM::_impl_myI*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
myM::_impl_myI::_mostDerivedRepoId()
{
  return ::myM::myI::_PD_repoId;
}

POA_myM::myI::~myI() {}

