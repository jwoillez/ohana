// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "Test.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_myM_mmyS[] = {
  {"myB", CORBA::TypeCode::PR_boolean_tc()}
};

#ifdef _0RL_tc_myM_mmyS
#  undef _0RL_tc_myM_mmyS
#endif
static CORBA::TypeCode_ptr _0RL_tc_myM_mmyS = CORBA::TypeCode::PR_struct_tc("IDL:myM/myS:1.0", "myS", _0RL_structmember_myM_mmyS, 1, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace myM { 
  const ::CORBA::TypeCode_ptr _tc_myS = _0RL_tc_myM_mmyS;
} 
#else
const ::CORBA::TypeCode_ptr myM::_tc_myS = _0RL_tc_myM_mmyS;
#endif


static const char* _0RL_enumMember_myM_mmyI_mmyE[] = { "E1" };
static CORBA::TypeCode_ptr _0RL_tc_myM_mmyI_mmyE = CORBA::TypeCode::PR_enum_tc("IDL:myM/myI/myE:1.0", "myE", _0RL_enumMember_myM_mmyI_mmyE, 1, &_0RL_tcTrack);
const CORBA::TypeCode_ptr myM::myI::_tc_myE = _0RL_tc_myM_mmyI_mmyE;

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace myM { 
  const ::CORBA::TypeCode_ptr _tc_myI = CORBA::TypeCode::PR_interface_tc("IDL:myM/myI:1.0", "myI", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr myM::_tc_myI = CORBA::TypeCode::PR_interface_tc("IDL:myM/myI:1.0", "myI", &_0RL_tcTrack);
#endif

static void _0RL_myM_mmyS_marshal_fn(cdrStream& _s, void* _v)
{
  myM::myS* _p = (myM::myS*)_v;
  *_p >>= _s;
}
static void _0RL_myM_mmyS_unmarshal_fn(cdrStream& _s, void*& _v)
{
  myM::myS* _p = new myM::myS;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_myM_mmyS_destructor_fn(void* _v)
{
  myM::myS* _p = (myM::myS*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const myM::myS& _s)
{
  myM::myS* _p = new myM::myS(_s);
  _a.PR_insert(_0RL_tc_myM_mmyS,
               _0RL_myM_mmyS_marshal_fn,
               _0RL_myM_mmyS_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, myM::myS* _sp)
{
  _a.PR_insert(_0RL_tc_myM_mmyS,
               _0RL_myM_mmyS_marshal_fn,
               _0RL_myM_mmyS_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, myM::myS*& _sp)
{
  return _a >>= (const myM::myS*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const myM::myS*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_myM_mmyS,
                    _0RL_myM_mmyS_unmarshal_fn,
                    _0RL_myM_mmyS_marshal_fn,
                    _0RL_myM_mmyS_destructor_fn,
                    _v)) {
    _sp = (const myM::myS*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_myM_mmyI_mmyE_marshal_fn(cdrStream& _s, void* _v)
{
  myM::myI::myE* _p = (myM::myI::myE*)_v;
  *_p >>= _s;
}
static void _0RL_myM_mmyI_mmyE_unmarshal_fn(cdrStream& _s, void*& _v)
{
  myM::myI::myE* _p = (myM::myI::myE*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, myM::myI::myE _s)
{
  _a.PR_insert(_0RL_tc_myM_mmyI_mmyE,
               _0RL_myM_mmyI_mmyE_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, myM::myI::myE& _s)
{
  return _a.PR_extract(_0RL_tc_myM_mmyI_mmyE,
                       _0RL_myM_mmyI_mmyE_unmarshal_fn,
                       &_s);
}

static void _0RL_myM_mmyI_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_myM_mmyI_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(myM::myI::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_myM_mmyI_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, myM::myI_ptr _o)
{
  myM::myI_ptr _no = myM::myI::_duplicate(_o);
  _a.PR_insert(myM::_tc_myI,
               _0RL_myM_mmyI_marshal_fn,
               _0RL_myM_mmyI_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, myM::myI_ptr* _op)
{
  _a.PR_insert(myM::_tc_myI,
               _0RL_myM_mmyI_marshal_fn,
               _0RL_myM_mmyI_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = myM::myI::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, myM::myI_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(myM::_tc_myI,
                    _0RL_myM_mmyI_unmarshal_fn,
                    _0RL_myM_mmyI_marshal_fn,
                    _0RL_myM_mmyI_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (myM::myI_ptr)_r->_ptrToObjRef(myM::myI::_PD_repoId);
    else
      _o = myM::myI::_nil();
    return 1;
  }
  return 0;
}

