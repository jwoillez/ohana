/* $Source: /usr/local/cvsroot/kroot/kss/if/rtc/idl/ConfigAPIWorkspace.idl,v $
 * $Id: ConfigAPIWorkspace.idl,v 1.2 2007/09/27 23:25:58 intdev Exp $
 */

/**
 * @file
 * The interface definition for the ConfigAPIWorkspace server.
 * @ingroup Configuration
 *
 * Developed by Cleanroom Software Engineering for
 * Jet Propulsion Laboratory.
 *
 * @author Michael Deck
 */

#ifndef INC_CONFIGSERVER_API_WORKSPACE_IDL
#define INC_CONFIGSERVER_API_WORKSPACE_IDL
#pragma prefix "rtc.jpl.nasa.gov"

#include "ConfigAPICommon.idl"
#include "ConfigAPIEnums.idl"
#include "ConfigAPIExceptions.idl"
#include "ConfigAPIStructs.idl"

module RTC {
  module Configuration {
    /**
     * @addtogroup Configuration
     * @{
     */
    /**
     * ConfigAPIWorkspace interface defines operations on configurator
     * workspaces.
     */
    interface ConfigAPIWorkspace
    {

      /**
       * Checkin all items in workspace, return list of names of items checked
       * in.
       *
       * @param workspaceName name of workspace to checkin
       * @param userName user name to use for logging
       * @param logMessage log message for items checked in
       * @param iterator The iterator of item IDs checked in
       * @return array of fully-qualified names of items checked in
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void checkinWorkspace
        (in string workspaceName, in string userName, in string logMessage,
         inout ItemIterator iterator)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Create named workspace if it does not already exist.
        * <p>Events: WorkspaceAddedEvent, WorkspaceReplacedEvent
        *
        * @param workspaceName name of workspace to create
        * @param addIntrinsicTypes
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void createWorkspace
        (in string workspaceName, in boolean addIntrinsicTypes)
         raises (ConfigAPIException, TaskKilledException);

      /**
        * Delete named workspace if exists
        * <p>Events:
        * {ModuleDeletedEvent |
        * ClassDeletedEvent | InstanceDeletedEvent | QueryDeletedEvent}
        * WorkspaceDeleted
        *
        * @param workspaceName name of workspace to create
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void dropWorkspace
        (in string workspaceName)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Set itemIterator to an iterator of all items that would be checked
        * in for this workspace.
        *
        * @param workspaceName the workspace to use
        * @param iterator The holder to take item IDs that would be checked in
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void getCheckinListingForWorkspace
        (in string workspaceName, out ItemIterator iterator)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Return an iterator for each kind of interesting thing in the workspace.
       * Iterators are disjointed.
       *
       * @param workspaceName name of workspace to get iterators for
       * @param modulesIterator iterator of ConfigModuleStruct in workspace
       * @param typesIterator iterator of ConfigClassStruct in workspace that
       * are not members
       * @param classMembersIterator iterator of ConfigClassStruct in workspace
       * that are members
       * @param topLevelInstancesIterator iterator of ConfigInstanceStruct in
       * workspace that are not members
       * @param arrayInstanceMembersIterator iterator of ConfigInstanceStruct in
       * workspace that are array members
       * @param scalarInstanceMembersIterator iterator of ConfigInstanceStruct
       * in workspace that are non-array members
       * @param queriesIterator iterator of ConfigQueryStruct in workspace
       * @return total size of all iterators
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      long getWorkspaceItems
        (in string workspaceName,
         out ModuleIterator modulesIterator,
         out ClassIterator typesIterator,
         out ClassIterator classMembersIterator,
         out InstanceIterator topLevelInstancesIterator,
         out InstanceIterator arrayInstanceMembersIterator,
         out InstanceIterator scalarInstanceMembersIterator,
         out QueryIterator queriesIterator)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Return true if named workspace exists
        *
        * @return  true if named workspace exists
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      boolean workspaceExists
        (in string workspaceName)
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Return sequence of workspace names in this repository.
        *
        * @return sequence of workspace names in this repository
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      StringList lookupWorkspaces
        ()
          raises (ConfigAPIException, TaskKilledException);

      /**
        * Renames an existing workspace
        *
        * @return  true if named workspace exists
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void renameWorkspace
        (in string oldWorkspaceName, in string newWorkspaceName)
          raises (ConfigAPIException, TaskKilledException);

      void repairNullLinksInWorkspace (in string workspaceName)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Tag the workspace with version into the repository using version name
       * and version comments. This version of the function will throw an
       * exception if any items are not in UP-TO-DATE state or if any are tagged
       * with a sticky tag different from version. If version does not exist, it
       * will be created. If it does exist, it must be mutable else an exception
       * is thrown. [A future version could be written to mimic the CVS behavior
       * which tags the up-to-date version whether or not it is in the
       * workspace.]
       *
       * @param workspaceName nonnull workspace name containing items
       * @param version reference to the version to be used for tagging
       * @param  replaceTag to move an existing tag if it exists
       * @param messages returned as list of string, full dotted (V3 format)
       * name of all items tagged
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void tagWorkspace
        (in string workspaceName, in VersionStruct version, in boolean replaceTag, inout StringIterator messages)
          raises (ConfigAPIException, TaskKilledException);


      /**
        * Verify that the workspace is valid and optionally make it valid.
        *
        * @param workspaceName workspace name
        * @param makeValid
        * @param messages returned as list of string, full dotted (V3 format)
        * name of all items tagged
        * @throws ConfigAPIException on errors
        * @throws TaskKilledException if task stopped by user
        */
      void validateWorkspace
        (in string workspaceName, in boolean makeValid, inout StringIterator messages)
          raises (ConfigAPIException, TaskKilledException);
    };
    /**
     * @}
     * end Configuration
     */
  };
};
#endif //  INC_CONFIGSERVER_API_WORKSPACE_IDL
