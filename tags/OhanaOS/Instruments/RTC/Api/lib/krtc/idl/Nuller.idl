


#ifndef INC_NULLER_IDL
#define INC_NULLER_IDL

#include <RTCCore.idl>
#include <Image.idl>
#include <Camera.idl>
#include <PhaseTrackUtils.idl>
#include <DispersionCorrector.idl>

#pragma prefix "keck.jpl.nasa.gov"


module NullerModule {

  /** @enum OPERATING_MODE
   *
   * Basic operation modes of the nuller.
   *
   */
  enum OPERATING_MODE {
    /// Inactive mode
    OM_NONE,  

    /// nuller performs alignment functions
    OM_ALIGN,
 
    /// nuller performs servo functions for standard 
    /// dither V^2, Nuling, and Astrometery
    OM_ZABCD,
 
    /// nuller performs servo functions for
    /// differential phase measurements 
    OM_DP     
  };
  
  typedef sequence<OPERATING_MODE> OPERATING_MODE_LIST;

  /** @enum SERVO_MODE
   * nuller servo modes.  Applicable in 
   * operational mode OM_SERVO  
   */
  enum SERVO_MODE { 
    /// nuller is idle 
    SM_IDLE,  
      
    /// nuller is performing a calibration
    SM_CALIBRATE,
   
    /// nuller is attempting to track the fringe
    SM_TRACK, 
      
    ///nuller is checking the alignment
    SM_ALIGN,
       
    ///not used
    SM_THRESHOLD_CALIBRATE, 

    ///not used
    SM_CALIBRATE_BRIGHT, 

    ///not used
    SM_CALIBRATE_GD 
  };
  
  typedef sequence<SERVO_MODE> SERVO_MODE_LIST;

  /** @enum TRACK_MODE
   *
   * Submodes of the nuller track servo mode.
   * These have meaning only when the servo mode is SM_TRACK
   */

 
  enum TRACK_MODE { 
    /// nuller is searching for a fringe
    TM_DL_SEARCH,    
    /// one big step before entering semilock!
    TM_DL_PRE_SEMI_LOCK,  
    /// nuller verifying that a fringe was found
    TM_DL_SEMI_LOCK, 
    /// nuller is locked on a fringe 
    TM_DL_LOCK,      
    /// nuller is tracking on PZT
    TM_PZT_LOCK, 
    /// nuller unable to find and lock on a fringe 
    TM_DL_ERROR,      
    ///all loops are locked.
    TM_LOCKED 
  };
  
  typedef sequence<TRACK_MODE> TRACK_MODE_LIST;

  /** @enum CALIBRATION_TAG
   * Tags used to differentiate nuller data sets.  Applicable in operational
   * mode OM_SERVO and servo mode SM_CALIBRATE.
   */
  enum CALIBRATION_TAG {
    /// Normal nuller data
    CT_NONE,       
    /// Dark calibration data, continuous or gated
    CT_DARK,       
    ///dark data, null peak
    CT_DARK_NP, 

    CT_BRIGHT,     
    CT_BACKGROUND, 
    CT_RATIO_BACKGROUND, 
    CT_RATIO2_BACKGROUND,
    CT_FOREGROUND, 
    CT_RATIO,      
    CT_RATIO2,     
    CT_FRINGEPHASE,
    CT_RATIO_PLUS,
    CT_RATIO2_PLUS,
    CT_RATIO_MINUS,
    CT_RATIO2_MINUS
  };
  
  typedef sequence<CALIBRATION_TAG> CALIBRATION_TAG_LIST;

  /** @enum SEQUENCE_LENGTH
   * Indicates four-window or eight-window gated mode.
   */
  enum SEQUENCE_LENGTH {
    FOUR_BEAT, EIGHT_BEAT
  };

  typedef sequence <SEQUENCE_LENGTH> SEQUENCE_LENGTH_LIST;

  enum TRACK_STATE {
    TS_NONE,
    TS_DL_LOCK,
    TS_DATA_GOOD,
    TS_DATA_GOOD_NP
  };

  typedef sequence <TRACK_STATE> TRACK_STATE_LIST;


  /**
   * @interface Nuller interface
   *
   * @mainpage
   * The nuller is a fringe tracking gizmo which commands its delay
   * line to stabilize the path along the long baseline (K1+K2 primary, or 
   * K1+K2 secondary).
   * It expects a sawtooth dither which is provided by the delay lines.
   * It also sends commands to the ADC gizmo for dispersion compensation.
   * 
   */

   /**
    * @brief
    * This interface contails all the user level commands and enums for the
    * nuller gizmo.
    */

  interface Nuller : CameraModule::CameraUser {

    const double LOCK_FOREVER = -1.0;
    
    /**
     * @brief 
     * This exception is thrown when a command is issued that is not
     * supported by the current operational mode   
     */
    exception InvalidMode {};
    
    /** @brief
     * An invalid set of wavelengths was passed.
     */
    exception InvalidChannels {};
    exception InvalidCalibration {};
    exception Aborted {};
    
    /** 
     * Shutsdown the nuller servo or alignment tasks.
     */
    void Off();
    
    /**
     * Starts the nuller servo or alignment tasks.
     */
    void On();

    /**
     * Disables the nuller servo or alignment tasks.
     */
    void Disable();
    
    /** 
     * Enables the nuller servo or alignment tasks
     */
    void Enable();

    /** 
     * Idles nuller servo (OM_ZABCD only)
     */
    void Idle() raises (InvalidMode);

    /** 
     * Performs dark calibration for specified length of time. 
     * (OM_ZABCD only).
     */
    void CalibrateDark(in long iSeconds) 
      raises (InvalidMode, Aborted);

    /** 
     * Performs null peak dark cal for specified length of time.
     */
    void CalibrateDarkNullPeak(in long iSeconds) 
      raises (InvalidMode, Aborted);

    void CalibrateBright (in long iSeconds) raises (InvalidMode, Aborted);
    void CalibrateBackground (in long iSeconds) raises (InvalidMode, Aborted);
    void CalibrateRatioBackground (in long iSeconds) raises (InvalidMode, Aborted);
    void CalibrateRatio2Background (in long iSeconds) raises (InvalidMode, Aborted);
    void CalibrateForeground (in long iSeconds) raises (InvalidMode, Aborted);
    void CalibrateRatio (in long iSeconds) raises (InvalidMode, Aborted);
    void CalibrateRatio2 (in long iSeconds) raises (InvalidMode, Aborted);
    void CalibrateFringePhase (in long iSeconds) raises (InvalidMode, Aborted);

    void CalibrateRatioPlus (in long iSeconds) raises (InvalidMode, Aborted);
    void CalibrateRatio2Plus (in long iSeconds) raises (InvalidMode, Aborted);
    void CalibrateRatioMinus (in long iSeconds) raises (InvalidMode, Aborted);
    void CalibrateRatio2Minus (in long iSeconds) raises (InvalidMode, Aborted);

    void CalibrateGroupDelay (in long iSeconds) raises (InvalidMode, Aborted);

    /** 
     * Initiates fringe tracking.
     */
    void Track() raises (InvalidMode);

    /** 
     * Informs nuller of the size of the delay line stroke 
     * (meters stellar OPD)
     */
    void SetStroke(in double dStroke);

    /** 
     * Sets a dc offset command to the command computed by the nuller
     * when performing closed loop control of the delay line 
     * (meters stellar OPD).  This allows user to set a systematic offset to 
     * reduce search times.
     **/
    void SetDlCommandOffset(in double dOffset);
    
    /** 
     * Updates a dc offset command to the command computed by the fringe 
     * tracker when performing closed loop control of the delay line.  
     * The updated offset is based on the current offset and the last set of
     * tracking offsets.
     */
    void UpdateDlCommandOffset();

    /** 
     * Sets offset for PZT loop.
     */
    void SetPztCommandOffset(in double dOffset);

    /** 
     * Updates offset for PZT loop.
     */
    void UpdatePztCommandOffset();

    void SetAdcCommandOffset(in double dOffset);
    void UpdateAdcCommandOffset();

    /** 
     * Sets the nominal wavelength for each pixel of each nuller 
     * spectrometer channel. If the size of the spectrometers does not match 
     * the currently selected camera waveform used by the nuller 
     * @see CameraUser::SetWaveformProperties
     * The InvalidChannels exception is raised if an invalid wavelength file
     * is used.
     **/
    void SetSpectrometerChannels(in PhaseTrackUtilsModule::SPECTROMETER_STRUCTURES_LIST SpectrometerData)
      raises (InvalidChannels);
      
    /*** 
     * Set the calibration data used by the nuller to correct for 
     * bias, gain, and readnoise to the specified values.  InvalidCalibration 
     * is raised if Data is not compatible with the currently selected camera
     * waveform(i.e. there should be calibration data for each pixel of each
     * spectrometer).  This operation is intended to be used to restore 
     * calibration data previously obtained using the GetCalibration
     * operation.
     */
    void SetCalibration(in PhaseTrackUtilsModule::Calibration C)
      raises (InvalidCalibration);
    
    /***
     * Returns the current calibration data used by the nuller.
     */
    PhaseTrackUtilsModule::Calibration GetCalibration();

    /** 
     * Sends a delay line target of 0.
     */
    void ClearDlTarget ();


    /** 
     * Simulate a hold from FATCAT.
     */
    void Hold ();

    /** 
     * Release a hold from FATCAT.
     */
    void ReleaseHold();

    /** 
     * Enable chop demodulation -- for lockin mode.
     */
    void EnableChopMode();

    /** 
     * Enable chop demodultion -- for 4-sided chop.
     */
    void Enable4SidedChopMode();

    /** 
     * Disable chop demodulation.
     */
    void DisableChopMode();

    /** 
     * Send an ADC target of zero.
     */
    void ClearAdcTarget ();

    /** 
     * Enable ADC servo loop.
     */
    void EnableAdcControl ();

    /** 
     * Disable ADC servo loop.
     */
    void DisableAdcControl();

    /** 
     * Disable servo gate.
     */
    void ServoGateOff ();

    /** 
     * Enable servo gate.
     */
    void ServoGateOn ();

    /** 
     * Set a phase tracking target in radians.
     */
    void SetPhaseTarget (in double Target);

    void CalibrateThresholds (in long Seconds);
    void RestoreDefaultThresholds ();

    /** 
     * Clear all dark calibrations.
     */
    void ResetCalibration ();

    /** 
     * Enables internal feed forward.
     */
    void FeedBackGateOn ();

    /** 
     * Disables internal feed forward.
     */
    void FeedBackGateOff ();

    /** 
     * Enables sum/diff mode.
     */
    void CombineAllPhasorsOn ();

    /** 
     * Disables sum/diff mode.
     */
    void CombineAllPhasorsOff ();

    /** 
     * Enables null/peak mode.
     */
    void NullPeakOn ();

    /** 
     * Disables null/peak mode.
     */
    void NullPeakOff ();

    /** 
     * Enables PZT loop when DL is locked.
     */
    void EnableOuterLoop ();

    void DisableOuterLoop ();

    /** 
     * Prints dark cal info to terminal.
     */
    void PrintEBiases ();

    /** 
     * Enables derotation of slow triangle DL modulation.
     */
    void DerotateDLOn ();

    /** 
     * Disables derotation of slow triangle DL modulation.
     */
    void DerotateDLOff ();

    /** 
     * Moves DL and ADC by one wavelength.  For use when ADC servo
     * is saturated.
     */
    void ResetAdc ();

  };

};

#endif // INC_NULLER_IDL
