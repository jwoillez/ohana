/* $Source: /usr/local/cvsroot/kroot/kss/if/rtc/idl/Ping.idl,v $
 * $Id: Ping.idl,v 1.2 2007/09/27 23:26:02 intdev Exp $
 * -*- Mode: c++ -*-
 */

/**
 * @addtogroup Core
 * @{
 */

/**
 * @file
 * The interface definition for ping and pong.
 *
 * @author Richard Johnson
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:26:02 $
 */

#ifndef INC_PING_IDL
#define INC_PING_IDL

/**
 * Ping-Pong related interfaces and types.
 * The desire is to be able to ping an object and not worry that the
 * pinging process will hang indefinitly in the event that the target object
 * can't respond.  Implementing ping as a simple oneway operation doesn't
 * allow the pinging agent to recieve confirmation that the pinged object
 * responded.  To answer the confimation problem a pinged object will
 * "pong" the pinging object (whose reference is passed as part of the ping
 * operation along with a token that allows the pong object to discriminate
 * between multiple ping objects.  Like the ping operation, pong is a oneway
 * operation.  The "ping-pong" operations allow complete asynchronous
 * behavior such that neither the side can hang the other.
 */

# pragma prefix "rtc.jpl.nasa.gov"

module PingModule {

  // forward declarations
  interface PingObject;
  interface PongObject;

  /**
   * Token passed between PingObject and PongObject.
   * This allows the PongObject to be common.
   */
  typedef any PingToken;

  /**
   * Interface for a asynchronous "ping-able" object.
   */
  interface PingObject {

    /**
     * Send a "ping".
     * Do this as a oneway to ensure the client can not crash or hang.
     * If the PingObject is alive it will issue a Pong operation on PongObj
     * passing back the Token.
     *
     * @param PongObj The target for a subsequent "pong" reply.
     * @param Token An arbitrary token to be returned in the "pong".
     */
    oneway void Ping (in PongObject PongObj, in PingToken Token);
  };

  /**
   * Interface for a asynchronous "pong-able" object.
   */
  interface PongObject {

    /**
     * Send a "pong".
     * Do this as a oneway to ensure the ping recipient can not crash or hang.
     * This should be invoked only by a PingObject in response to a Ping
     * operation.
     *
     * @param Token An arbitrary token to be sent.
     * Should correspond to a token supplied by the originating "ping".
     */
    oneway void Pong (in PingToken Token);
  };
};

#endif

/**
 * @}
 * end Core
 */
