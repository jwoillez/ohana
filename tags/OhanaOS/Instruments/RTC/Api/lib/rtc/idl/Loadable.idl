/* $Source: /usr/local/cvsroot/kroot/kss/if/rtc/idl/Loadable.idl,v $
 * $Id: Loadable.idl,v 1.2 2007/09/27 23:26:00 intdev Exp $
 * -*- Mode: c++ -*-
 */

/**
 * @file
 * The interface definitions for RTC::Loadable.
 *
 * @author Richard Johnson
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:26:00 $
 */

#ifndef INC_RTC_LOADABLE_IDL
#define INC_RTC_LOADABLE_IDL

#include "Destructible.idl"

#pragma prefix "rtc.jpl.nasa.gov"

module RTC {

  /**
   * Loadable specifies a generic interface to objects that are
   * designed to be dynamically loaded onto a CPU Manager using the
   * RTC::DynamicLoader service.  Loadables include but are not limited to
   * object factories and additional RTC services.
   *
   * The implementation of a loadable object is typically build into a
   * shared library which is then dynamically linked to the CPU Manager
   * at run time.  For the dynamic loader to do this it needs specific
   * information about the loadable which is defined by the Loadable::Id.
   *
   * All Loadable objects are Destructible (See Destructible.idl). When
   * a loadable is destroy it should ultimately unload/unlink the loadable's
   * library from the CPU Manager.
   */
  interface Loadable : Destructible {

    /// Name of the loadable objects initialization function
    /// This is the global function name that must be in the shared library
    const string EntryPoint = "LoadableInit";

    /// Loadable Id structure
    struct Id {
      string Name; ///< Name of the loadable - this should be unique
      string File; ///< Shared library to dynamically link (fully qualified)
    };

    /// @return The loadable's id
    Id Identity();
  };
};

#endif
