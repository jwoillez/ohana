/* $Source: /usr/local/cvsroot/kroot/kss/if/rtc/idl/Scheduler.idl,v $
 * $Id: Scheduler.idl,v 1.2 2007/09/27 23:26:03 intdev Exp $
 * -*- Mode: c++ -*-
 */

/**
 *  @file
 *  Interface definition for RTC::Tasks::Scheduler service
 *
 * @author Richard Johnson
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:26:03 $
 */

#ifndef INC_RTC_TASKS_SCHEDULER_IDL
#define INC_RTC_TASKS_SCHEDULER_IDL

#include "Service.idl"
#include "Tasks.idl"


#pragma prefix "rtc.jpl.nasa.gov"


module RTC {
  module Tasks {

    /**
     * The RTC::Task::Scheduler provides the interface for a periodic
     * task scheduler from the point of view of an external observer.
     * This interface does not provide means to schedule new tasks
     * but allows users to monitor and modify the state of existing
     * tasks.
     */
    interface Scheduler : RTC::Service {

      /// Scheduler's service name
      const string ServiceName = "Scheduler";

      /// Task is not found
      exception TaskNotFound {};

      /// @return The task info for all periodic tasks
      RTC::Tasks::PeriodicTaskInfoSequenceType TaskInfo();

      /**
       * Disable a periodic task by id.
       * @param TaskId The task id
       * @throw TaskNotFound TaskId is not a perioidic task
       */
      void DisableById(in long TaskId) raises (TaskNotFound);

      /**
       *  Disable a periodic task by name.
       *  @param Name The task name
       *  @throw TaskNotFound Name is not a perioidic task
       */
      void DisableByName(in string Name) raises (TaskNotFound);

      /**
       *  Enable a periodic task by id.
       *  @param TaskId The task id
       *  @throw TaskNotFound TaskId is not a perioidic task
       */
      void EnableById(in long TaskId) raises (TaskNotFound);

      /**
       *  Enable a periodic task by name.
       *  @param Name The task name
       *  @throw TaskNotFound Name is not a perioidic task
       */
      void EnableByName(in string Name) raises (TaskNotFound);

      /**
       *  Delete a periodic task by id.
       *  @param TaskId The task id
       *  @throw TaskNotFound TaskId is not a perioidic task
       */
      void DeleteById(in long TaskId) raises (TaskNotFound);

      /**
       *  Delete a periodic task by name.
       *  @param Name The task name
       *  @throw TaskNotFound Name is not a perioidic task
       */
      void DeleteByName(in string Name) raises (TaskNotFound);
    };
  };
};

#endif
