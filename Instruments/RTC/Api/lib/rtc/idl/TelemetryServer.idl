/* $Source: /usr/local/cvsroot/kroot/kss/if/rtc/idl/TelemetryServer.idl,v $
 * $Id: TelemetryServer.idl,v 1.2 2007/09/27 23:26:05 intdev Exp $
 * -*- Mode: c++ -*-
 */

/**
 * @file
 * Interface definitions for the RTC Telemetry Server.
 *
 * @author Richard Johnson
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002-2004, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:26:05 $
 */

#ifndef INC_RTC_TELEMETRY_SERVER_IDL
#define INC_RTC_TELEMETRY_SERVER_IDL

#include <CosEventComm.idl>
#include <CosEventChannelAdmin.idl>
#include "Name.idl"
#include "Destructible.idl"
#include "Telemetry.idl"
#include "Versionable.idl"

// Prefix all IDL types
#pragma prefix "rtc.jpl.nasa.gov"


module RTC {
  module Telemetry {

    exception MetaDataNotAvailable {};

    /**
     * Telemetry channel interface.  This is an extension of the CosEvent
     * Channel interface to support metadata for telemetry channels.
     */
    interface Channel : CosEventChannelAdmin::EventChannel {

      /**
       * Accessor function for the telemetry channel name.
       * @return The name of the telemetry channel.
       */
      RTC::NameType Name();

      /**
       * Accessor function for the telemetry channel identifier.
       * @return The identifier for this telemetry channel.
       */
      IdType Id();

      /**
       *  Associate metadata with the channel.
       *  @param MetaData The channel's metadata
       */
      void SetMetaData(in RTC::Telemetry::MetaData MetaData);

      /**
       * Get the metadata associated with the channel if it exists.
       * @throw MetaDataNotAvailable Metadata has not been provided by the
       * supplier.
       */
      RTC::Telemetry::MetaData GetMetaData()
        raises (MetaDataNotAvailable);
    };


    /**
     * A factory for telemetry event channels
     */
    interface ChannelFactory {

      /// Duplicate channel.
      exception Duplicate {};

      /// Statistics for a single event channel
      struct ChannelStatistics {
          RTC::NameType Name;      ///< Name of the channel
          string LastPacketTime;   ///< UTC time of the last packet
          double dLastPacketBytes; ///< Size of last packet (Bytes)
          double dTotalBytes;      ///< Total bytes handled by channel
          double dBytesPerSecond;  ///< Bytes/s (running average)
      };

      /// Sequence of channel statistics
      typedef sequence<ChannelStatistics> ChannelStatisticsListType;

      /// Statistics for the channel factory
      struct FactoryStatistics {
          string Name;                            ///< Factory name
          double dBytesPerSecond;                 ///< Bytes/s (running average)
          ChannelStatisticsListType ChannelStats; ///< Individual channel stats
      };

      /// Sequence of factory statistics
      typedef sequence<FactoryStatistics> FactoryStatisticsListType;

      /**
       * Create an event channel with specified name.
       * @param Name The name of the channel
       * @param Id The identifier that the channel will have
       * @return telemetry channel reference
       */
      Channel Create(in RTC::NameType Name, in IdType Id)
        raises (Duplicate);

      /// @return Statistics for the channel factory.
      FactoryStatistics Statistics();
    };


    /**
     * Telemetry supplier interface.  This is just an extension of the
     * CosEvent ProxySupplier interface.
     */
    interface ProxySupplier : CosEventChannelAdmin::ProxyPushSupplier {

      /// @return Name of the telemetry supplier
      RTC::NameType Name();

      /// @return The id of the telemetry channel associated with the supplier
      IdType Id();

      /// @return Metadata associated with the telemetry supplier
      Telemetry::MetaData MetaData() raises (MetaDataNotAvailable);
    };


    /**
     * Telemetry proxy consumer interface.  This is just an extension of the
     * CosEvent ProxyPushConsumer interface.
     */
    interface ProxyConsumer : CosEventChannelAdmin::ProxyPushConsumer {

      /**
       *  Set the metadata associated with the supplier.  This should
       *  send a notification to the consumers that new metadata is available.
       *  @param Data The new metadata
       */
      void SetMetaData(in MetaData Data);
    };


    /**
     * Telemetry push consumer interface.  This is just an extension of the
     * CosEvent PushConsumer interface to support side-band notification.
     */
    interface PushConsumer : CosEventComm::PushConsumer {

      /**
       * Types of side-band notifications that telemetry push consumers can
       * receive.
       */
      enum NotificationType {
        META_DATA_CHANGE  ///< New metadata is available
      };

      /**
       * Notify push consumer of something that may be interesting but is not
       * telemetry data.
       * @param Value The type of notification
       */
      void Notify(in NotificationType Value);
    };


    /**
     * The telemetry server provides a mechanism to subscribe, and publish to
     * telemetry channels.  The creation of telemetry channels is delegated
     * to potentially distributed channel factories that are registered
     * with the telemetry server.  This allows there to be a single
     * telemetry server for a control system to use while still allowing
     * the handling of channels to be distributed.
     * @todo Include a Shutdown() method.
     */
    interface Server : RTC::Destructible, RTC::Versionable {

      /// Thrown if attempt to subscribe to a telemetry channel or
      /// connect as a supplier fails.
      exception NotConnected {};

      /// Duplicate channel factory.
      exception Duplicate {};

      /// Internal error.
      exception InternalError {};

      /// Specified resource not found in server.
      exception NotFound {};

      /**
       * Diagnostic categories.
       */
      enum DiagnosticMode {
        DBG_NONE,
        DBG_ALL,
        DBG_ORB,
        DBG_THREAD,
        DBG_CHANNEL,
        DBG_SUBSCRIBE,
        DBG_PACKET
      };

      /**
       * Obtain a list of telemetry channel names known to the telemetry
       * server.  This makes use of CORBA-style iterators to
       * allow uses to get portions of the list at a time.
       * @param N Maximum number of names per chunk
       * @param ChannelNames List of channel names
       * @param Iter Iterator for the next set of names. (nil if none)
       */
      void ChannelList(in unsigned long N,
                       out NameSequenceType ChannelNames,
                       out NameIterator Iter);

      /**
       * Get the id of the telemetry channel.
       * @param ChannelName The name of the telemetry channel
       * @return The channel id
       * @throw NotFound Channel -a ChannelName does not exist
       */
      IdType Id(in NameType ChannelName) raises (NotFound);

      /**
       * Get metadata information about a specific channel.
       * @param ChannelName The name of the channel
       * @return Metadata about the specified channel
       * @throw NotFound Channel -a ChannelName does not exist
       * @throw MetaDataNotAvailable Channel -a ChannelName has no metadata
       */
      Telemetry::MetaData MetaData(in NameType ChannelName)
        raises (NotFound, MetaDataNotAvailable);

      /**
       * Obtain a list of telemetry name-id pairs  known to the telemetry
       * server.  This makes use of CORBA-style iterators to
       * allow users to get portions of the list at a time.
       * @param N Maximum number of name-id structures per chunk
       * @param NameIdPairs List of name-id pairs
       * @param Iter Iterator for the next set of name-id pairs. (nil if none)
       */
      void IdList(in unsigned long N,
                  out NameIdPairSequenceType NameIdPairs,
                  out IdIterator Iter);

      /**
       * Obtain a list of telemetry name-metadata pairs known to the telemetry
       * server.  Channels with no metadata associated with them are not
       * returned by this iterator.  This makes use of CORBA-style iterators
       * to allow users to get portions of the list at a time.
       * @param N Maximum number of name-metadata structures per chunk
       * @param Data List of meta data
       * @param Iter Iterator for the next set of name-metadata. (nil if none)
       */
      void MetaDataList(in unsigned long N,
                        out NameMetaDataPairSequenceType Data,
                        out MetaDataIterator Iter);

      /**
       * Subscribe to a channel as a consumer.  Connects a callback object
       * to one or more telemetry channels specified by NameList.
       * @param ChannelName Name of the telemetry channel to connect consumer
       * @param ConsumerCallback the callback object that gets notified
       * @return Push supplier object that can be used to disconnect consumer
       * from the channel
       */
      ProxySupplier Subscribe(in RTC::NameType ChannelName,
                              in RTC::Telemetry::PushConsumer ConsumerCallback)
        raises (NotConnected, InternalError);

      /**
       * Connects a supplier to the telemetry channel specified by Name.
       * and returns object reference to a push consumer that acts as a proxy
       * consumer for the supplier.  Suppliers push data to these consumers.
       * @param ChannelName The name of the telemetry channel to connect to
       * @param Data Meta data about the telemetry supplier
       * @param Id The telemetry channel id generated by the telemetry server
       * @return Reference to the push consumer to push telemetry packets to
       */
      ProxyConsumer ConnectSupplier(in RTC::NameType ChannelName,
                                    in RTC::Telemetry::MetaData Data,
                                    out IdType Id)
        raises (NotConnected, InternalError);

      /**
       * Register a channel factory with the telemetry server.
       * @param FactoryName The name of the factory
       * @param FactoryRef The factory reference
       * @throw Duplicate A factory with same name exists
       */
      void RegisterChannelFactory(in string FactoryName,
                                  in ChannelFactory FactoryRef)
        raises (Duplicate);

      /**
       *  Unregister a channel factory with the telemetry server.
       *  @param FactoryName The name of the factory
       *  @throw NotFound The factory is not known to the server
       */
      void UnregisterChannelFactory(in string FactoryName)
        raises (NotFound);

      /**
       * Provide statistics for all factories registered with the server.
       * @return Factory statistics
       */
      ChannelFactory::FactoryStatisticsListType Statistics();

      /**
       * Enable or disable diagnostic modes.
       */
      void SetDiagnosticMode(in DiagnosticMode Mode, in long Level)
        raises (NotFound);
    };
  };
};

#endif
