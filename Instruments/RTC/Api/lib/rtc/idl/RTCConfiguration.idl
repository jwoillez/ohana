/* $Source: /usr/local/cvsroot/kroot/kss/if/rtc/idl/RTCConfiguration.idl,v $
 * $Id: RTCConfiguration.idl,v 1.2 2007/09/27 23:26:02 intdev Exp $
 * -*- Mode: c++ -*-
 */

/**
 * @addtogroup RTCConfiguration
 * @{
 */

/**
 * @file
 * The interface definition for the V2 RTC Configuration Server.
 *
 * @author Richard Johnson
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:26:02 $
 */

#ifndef INC_RTCCONFIGURATION_IDL
#define INC_RTCCONFIGURATION_IDL


#include "Ping.idl"
#include "RTCCore.idl"

#include "Range.idl"

// Prefix all IDL types
#pragma prefix "rtc.jpl.nasa.gov"


/**
 * Types and interfaces related to the configuration server.
 * Provides access to persistently-stored configuration values
 * needed by the real-time control system and client applications.
 */
module RTCConfiguration
{
  /// Array of configuration entry values
  typedef sequence<string> VALUE_ARRAY;

  struct EntryUpdate {
    unsigned long uiTime;
    RTCCore::NAME Name;
    any Value;
  };

  typedef sequence<EntryUpdate> ENTRY_UPDATE_LIST;
  typedef sequence<ENTRY_UPDATE_LIST> ENTRY_UPDATE_LIST_LIST;

  /**
   * Incrementally retrieve lists of configuration
   * names from the configuration server.
   *
   * @see ConfigurationServer::ListItemsOfType
   */
  interface NameIterator {

    /**
     * Retrieve the next configuration name from the name iterator.
     *
     * @return boolean
     * @retval TRUE If a value is available and the returned name is valid.
     * @retval FALSE Otherwise; i.e. all names have been retrieved.
     *
     * @return ConfigurationName Name of a configuration item.
     */
    boolean NextOne (out RTCCore::NAME ConfigurationName);

    /**
     * Retries at most the next uiHowMany configuration names from the name iterator.
     *
     * @return boolean
     * @retval TRUE If ConfigurationNameList contains valid configuration names.
     * @retval FALSE Otherwise; i.e. all names have been retrieved.
     * @return uiHowMany Maximum number of items to return in this call.
     * @return ConfigurationNameList Names of configuration items.
     */
    boolean NextN (in unsigned long uiHowMany, out RTCCore::NAME_LIST ConfigurationNameList);

    /**
     * Destroys the iterator.
     * This can be called at any time but should be called
     * when the iterator user is finished iterating over the name list.
     */
    void Destroy ();
   };


  /**
   * Configuration server interface.  Specifies how to connect to a configuration database, load and
   * save configuration entry values.
   */
  interface ConfigurationServer : PingModule::PingObject {

    /**
     * Information about the database connection.
     */
    struct ConnectionInfo {
      string sDatabase;  // Name of the database
      string sConfiguration; // Name of the configuration within the database
      string sUsername;  // Name of the database user (for locking)
      string sServer;    // Name of the database server
      string sPassword;  // Name of the database password if needed
      string sPort;      // Database port number (defaults to 5432 for Postgres)
      string sTraceFile; // file to be used for tracing; null if no trace
      boolean bReadonly; // true iff db to be opened readonly
    };

    /// Reason why a database connect could not be established.
    enum NOT_CONNECTED_REASON { UNKNOWN_DATABASE,
                                UNKNOWN_CONFIGURATION,
                                INVALID_DATABASE,
                                INVALID_CONFIGURATION,
                                NO_CONNECTION };

    /// A database connection could not be established.
    exception NotConnected {
      NOT_CONNECTED_REASON Reason;
    };

    /// A specified configuration entry was not found in the currently connected database.
    exception EntryNotFound {};

    /// A type mismatch was encountered.
    exception InvalidType {};

    /**
     * Connect to the specified configuration database.
     *
     * @param Info Details needed to establish a connection to a database.
     */
    void Connect (in ConnectionInfo Info) raises (NotConnected);

    /**
     * Disconnect from the current configuration database.
     */
    void Disconnect () raises (NotConnected);

    /**
     * Load the value for the specified item.
     *
     * @param EntryName Name of this (potential) configuration item.
     * @return Value Corresponding value for the specified name.
     */
    void LoadConfiguration(in RTCCore::NAME EntryName, out any Value)
      raises (NotConnected, EntryNotFound, InvalidType);

    /**
     * Save Value into the specified item.
     *
     * @param EntryName Item to save.
     * @param Value Corresponding value of item to save.
     */
    void SaveConfiguration(in RTCCore::NAME EntryName, in any Value)
      raises (NotConnected, EntryNotFound, InvalidType);

    /**
     * Load an array of values for the specified name.
     *
     * @param EntryName Item to retrieve.
     * @result Value Corresponding array of values.
     */
    void LoadConfigurationArray(in RTCCore::NAME EntryName, in long number, out any Value)
      raises (NotConnected, EntryNotFound, InvalidType);

    /**
     * Save an array of values into configuration.
     *
     * @param EntryName Item to save.
     * @param number Count of items in list.
     * @param Value List of values to save for this item.
     */
    void SaveConfigurationArray(in RTCCore::NAME EntryName, in long number, in any Value)
      raises (NotConnected, EntryNotFound, InvalidType);

    /**
     * Queries database to find a list of names.
     * The list corresponds to all entries of the specified type having an entry name that is
     * prefixed with Prefix.  Returns a list ConfigurationNameList with maximum size uiHowMany
     * containing the full names of each matching entry in the database.  If the total number
     * of matches exceeds uiHowMany, an iterator object is returned in Iterator that can
     * iterator over the remaining list of matches.
     *
     * @param uiHowMany Maximum number of items to return.
     * @param sType Kind of items to return.
     * @param Prefix Root name for items to return.
     * @return ConfigurationNameList List of names matching criteria.
     * @return Iterator Name iterator to retrieve complete list.
     */
    void List(in unsigned long uiHowMany,
              in string sType,
              in RTCCore::NAME Prefix,
              out RTCCore::NAME_LIST ConfigurationNameList,
              out NameIterator Iterator)  raises (NotConnected);

    /**
     * Disconnects server from the current database.
     * Deactivates the server object when done.
     */
    oneway void Shutdown ();
  };

};

#endif

/**
 * @}
 * end Configuration
 */
