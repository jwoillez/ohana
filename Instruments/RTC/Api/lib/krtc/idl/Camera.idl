/*
 * $RCSfile: Camera.idl,v $
 * $Revision: 1.11.8.12 $
 * $Date: 2008/10/09 22:59:57 $
 */

/**
 * @file
 * Interface definition for the KRTC Camera Controller.
 *
 * @author Richard L. Johnson Jr.
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002-2004, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.11.8.12 $
 * @date $Date: 2008/10/09 22:59:57 $
 */

#ifndef INC_CAMERA_IDL
#define INC_CAMERA_IDL


#include <RTCCore.idl>
#include <Image.idl>
#include <DelayLine.idl>

#pragma prefix "keck.jpl.nasa.gov"

module CameraModule {

  typedef sequence<string> TELESCOPE_NAMES;  

  // Information about a single camera timing waveform
  // that includes description about intended use and camera board 
  // properties that should be set when using this waveform to 
  // capture images
  /**
   * @struct WaveformHeader Camera.idl CameraC.h
   *
   * The header information applied to camera waveform data. Each
   * detector type in use on the Keck Interferometer is driven using
   * pre-generated waveform data. This struct attempts to encompass
   * all of the metadata associated to the waveform data. Waveform
   * data with this header is the set of information required by
   * the camera controller.
   */
  struct WaveformHeader {
  
    string sName;     ///< Name of the waveform (i.e. file name)
    string sCreator;  ///< Name of the waveform creator. User names are typically used but any convention is fine.
    string sDateTime; ///< Date/Time the waveform was created. This string is free form. Typically generators use the strftime format of "%a %b %d %T %Y UTC"
    
    string sInterferometerMode; ///< Interferometer mode waveform was designed for (ex: V2)
    string sInstrument;  ///< Instrument waveform was designed for (ex: KAT)
    string sInstrumentMode; ///< Instrument mode waveform was designed for (ex: alignment, tracking)
    string sDescription;  ///< Short description of the waveform
  
    TELESCOPE_NAMES TelescopeNames; ///< List of telescope that are intended to be used with this waveform (currently only Keck1 and Keck2)
    
    long iNumSubImages; 	///< Number of sub-images read out by a waveform
    long iNumClockWords;	///< Number of clock words in the waveform data
    double dClockRate; 		///< Fundamental clock slew rate (Hz)
    double dReadRate;  		///< Pixel read rate
    double dMinExecTime;	///< Minimum waveform execution time (secs)
    double dFrameRate; 		///< Nominal waveform periodic rate (Hz)
    
    long iReadsPerPixel; 	///< Number of reads for each pixel
    long iClockPrescale; 	///< Clock prescale value for the waveform trigger clock
    long iCoadds; ///< Number of hardware co-adds (= iReadsPerPixel - 1)
    long iNumOneShots;		///< Number of consecutive frames to take

    boolean bDisableBufferSwapping; ///< 1 indicates that the camera controller should disable dual port RAM buffer swapping    
    
    unsigned long uiWaveformStartAddress; ///< Reserved for future work
    unsigned long uiWaveformStopAddress;  ///< Reserved for future work
    long iDualPortBuffer;                 ///< Reserved for future work

    double dDutyCycle;                    ///< Calculated dither duty cycle
    double dIntegPeriod;                  ///< Calculated dither integration period
    double dTotalIntegTime;               ///< Calculated dither total integration time
  };
  
  /**
   * Sequence of waveform headers. Provided to help generator and driver
   * implementors. Not currently used by the Camera gizmos.
   */
  typedef sequence<WaveformHeader> WAVEFORM_HEADER_LIST;
  
  /**
   * @struct Waveform Camera.idl CameraC.h
   * @brief The set of waveform data and header (metadata).
   *
   * Provides the header information, the submap (region of interest)
   * information and waveform data in one structure.
   * Data contains the waveform words that clock out the sub-images
   */
  struct Waveform {
    /**
     * Contains metadata associated to the waveform and
     * detector/camera. @see CameraModule::WaveformHeader for more info. 
     */
    WaveformHeader Header;
    /**
     * Contains a list of RTCImage::SubImageMap structs that define the
     * regions of interest. Only these submaps will be available to the
     * camera users when a waveform is loaded. These submaps will have
     * to match by name with the submap names for the image sensors used
     * by gizmos. 
     */
    RTCImage::SUB_IMAGE_MAP_LIST SubImageMapList;
    /**
     * Contains the raw waveform data that is to clocked out by the
     * camera interface board to drive the detector and ancillary
     * electronics. See documents on the various detectors on what to
     * put into this list. The list is a sequence of CORBA::ULong which
     * is a 32-bit unsigned integer quantity.
     */ 
    RTCImage::TIMING_WAVEFORM_DATA Data;
  };

  /**
   * @struct PixelLocation Camera.idl CameraC.h
   *
   * The KALI camera does not put pixels contiguously in dual port
   * RAM. So there is a special camera controller software driver
   * and image channels for KALI that provide decoding of pixels
   * on-the-fly to users of the KALI camera. This struct helps keep
   * track of camera board locations and pixel locations in the dual
   * port RAM of those respective camera boards.
   */
  struct PixelLocation {
    unsigned short CamBoard;     ///< CIC board index the pixel is found on
    unsigned short MemoryOffset; ///< Memory offset to use for the pixel
  };

  /**
   * Helper list of PixelLocations. The KALI camera controller uses this
   * list to keep track of all pixels on the detector.
   */
  typedef sequence<PixelLocation> PIXLOC_LIST;

  /**
   * @struct PixelMap Camera.idl CameraC.h
   *
   * This struct provides a look-up to the KALI camera controller and the
   * tPseudoKALIMappedImageChannel to help it keep track of actual pixel
   * locations compared to where the users of the KALI camera expect them
   * to be.
   */ 
  struct PixelMap {
    PIXLOC_LIST PixelLookup; ///< List of CameraModule::PixelLocation structs
    RTCImage::SubImageMap ImageMap; ///< A RTCImage::SubImageMap to compare waveform submaps to
  };

  /**
   * List of PixelMap structs. Currently not used
   */
  typedef sequence<PixelMap> PIXMAP_LIST;
  
  /**
   * Sequence of waveforms 
   */
  typedef sequence<Waveform> WAVEFORM_LIST;

 
  // Forward declaration
  interface CameraUser;

  /**
   * @interface Camera Camera.idl CameraC.h
   *
   * The Keck Interferometer has several subsystems which employ
   * sophisticated cameras to obtain imaging information. Each camera
   *  has several functions which can be performed on them to provide
   * different modes and different operating conditions. This interface
   * provides a unified software interface to all of these cameras. This
   * includes the fringe tracker, star tracker and nuller cameras.
   *
   * @exception Aborted The camera has aborted the current command
   * @exception InvalidMode Chosen mode is not a valid mode for the camera
   * @exception FileNotFound
   * @exception InvalidWaveform The provided waveform has some problem or is invalid for the camera
   * @exception InvalidFormat The provided waveform file is in an invalid format for the camera
   * @exception InvalidRate The provided frame rate is invalid for the camera/waveform
   * @exception InvalidCoadderShift The provided coadder shift is invalid for the camera
   */
  interface Camera : RTCCore::RTCObject {

    exception Aborted {};
    exception InvalidMode {};
    exception FileNotFound {};
    exception InvalidWaveform {};
    exception InvalidFormat {};
    exception InvalidRate {};
    exception InvalidCoadderShift {};
   
    /**
     * Power on the camera electronics (e.g. set biases etc). The
     * details of this mode is usually highly specific to the
     * camera but it should encompass all of the tasks necessary to
     * bring the camera on and make it ready for waveform
     * playing/image capture.
     * @throw Aborted Something has requested the camera to do something
     * else or has commanded the camera to stop the PowerOn sequence.
     */
    void PowerOn () raises (Aborted);

    /**
     * Power off the camera electronics (e.g. set biases etc). The
     * details of this mode is usually highly specific to the
     * camera but it should encompass all of the tasks necessary to
     * turn off the camera systems and make it ready for power down.
     * @throw Aborted Something has requested the camera to do something
     * else or has commanded the camera to stop the PowerOff sequence.
     */
     void PowerOff () raises (Aborted);
    
    /**
     * Marks the currently selected waveform as active. When this function
     * is used the CIC associated to the camera will begin playing the selected
     * waveform at the specified rate.
     * @throw Aborted Something has requested the camera to do something
     * else or has commanded the camera to stop the sequence.
     */
    void EnableWaveform() raises (Aborted);
    
    /**
     * Deactivates the currently selected waveform. Turns off playing of
     * the selected waveform on the associated CIC.
     * @throw Aborted Something has requested the camera to do something
     * else or has commanded the camera to stop the sequence.
     */
    void DisableWaveform () raises (Aborted);
    
    /**
     * Puts the CIC associated with the camera in a dianostic "loop back" mode
     * where the waveform is fed back as the image data in the CIC dual port
     * RAM instead of being played out to the camera electronics.
     * @throw Aborted Something has requested the camera to do something
     * else or has commanded the camera to stop the sequence.
     */
    void DiagnosticOn () raises (Aborted);
    
    /**
     * The CIC associated with the camera is returned to the normal clocking mode.
     */
    void DiagnosticOff () raises (Aborted);
    
    /**
     * Sets the trigger rate of the CIC waveform playback to the specified
     * rate.  This method will override the nominal rate set in the selected
     * waveform's header (@see CameraModule::WaveformHeader::dFrameRate. The
     * waveform rate will be restored if the waveform is re-selected using
     * SelectWaveform. The rate can only be set to a rate slower than the rate
     * in the waveform's header. This method is provided to allow for user
     * selectable longer integration times without having to have a separate
     * waveform.
     * @throw InvalidRate The provided rate is either less then zero or is
     * higher then the waveform's provided rate.
     */
    void SetFrameRate (in double dRate) raises (InvalidRate);
  
    /**
     * Sets the effective range of the camera hardware co-adder.
     * A higher shift level corresponds to a larger full scale
     * range but lower precision.  This is useful when the
     * photon flux is high to prevent the pixel data from saturating in
     * the hardware.  The pixel data generated by the camera driver
     * removes the effects of hardware co-adding and level shifting
     * @throw InvalidCoadderShift The provided co-adder shift is
     * invalid for the camera or CIC associated with the camera.
     */
    void SetCoadderShift (in long iShiftLevel)
      raises (InvalidCoadderShift);

    /**
     * Selects the active waveform from the list of configured waveforms
     * for the camera.
     * @param uiWaveform The index of the desired waveform from the list
     * of configured waveforms.
     * @throw InvalidWaveform If uiWaveform is out of range for the list
     * of configured waveforms.
     */
    void SelectWaveform (in unsigned long uiWaveform) 
      raises (InvalidWaveform, Aborted);

    /**
     * Adds a new waveform to the list of configured waveforms.
     * @param sFileName Specifies the name of the file that contains the
     * waveform
     * @throw FileNotFound Waveform file not found by the camera gizmo. The
     * file must be visible to the computer that the camera gizmo is running on
     * and must correspond to a filesystem path specific to that computer.
     * @throw InvalidFormat The waveform is not a valid waveform for the camera.
     * This can either mean that there was a problem with importing the waveform
     * from the file or the waveform does not have the correct data/metadata for
     * the camera.
     * @throw Aborted Something has requested the camera to do something
     * else or has commanded the camera to stop the sequence.
     */
    void AddWaveform (in string sFileName)
      raises (FileNotFound, InvalidFormat, Aborted);
        
    /**
     * Returns a list of waveform headers associated to the waveforms
     * in the cameras configured list of waveforms. The header index
     * corresponds to the index of configured waveforms.
     */
    WAVEFORM_HEADER_LIST WaveformHeaderList ();    
  
    /**
     * Connects a camera user to the camera. The camera user is added to the
     * list of camera users that the camera has. Each time a waveform changes
     * or the frame rate is changed the camera will communicate the change to
     * its users.
     * @param User CORBA reference to a valid camera user. A user
     * inherits from the CameraModule::CameraUser interface and implements
     * its methods to be the right object.
     * @param sUserName string value of the user name so that the camera 
     * can check if it's already in the list of users.  Name should be
     * like "FringeTracker[0]", not the whole project.RTC.... naming service name.
     */
     void ConnectUser (in CameraUser User, in string sUserName);

    /**
     * Return the dither timing parameters associated with the currently
     * selected camera waveform.
     */
    KeckDelayLineModule::DitherTimingInfo GetWaveformTiming(); 
  };
  
  
  /**
   * @interface CameraUser Camera.idl CameraS.h
   *
   * The CORBA interface to objects that use the camera. If an object
   * is collected image data from a camera it will need to know if the
   * waveform or the frame rate of the camera changes. This interface
   * provides a way for the camera to communicate these changes to the
   * users of the camera.
   *
   * @exception InvalidHeader The camera user considers the header it has received as invalid.
   * @exception InvalidMap The camera user considers the map it has received as invalid.
   */
  interface CameraUser : RTCCore::RTCObject {
  
    exception InvalidHeader {};
    exception InvalidMap {};
    
    /**
     * Sends waveform metadata to a camera user from the camera it has
     * connected itself to. This is intended to notify the camera user as to
     * the currently loaded camera waveform is for the camera the user is reading
     * from.
     * @param Header The header containing waveform metadata for the camera.
     * @param MapList The list of submaps that the waveform contains.
     * @throw InvalidHeader The header is invalid for this user.
     * @throw InvalidMap The map list contains invalid maps. Either the maps
     * are corrupted or there is no matching map for the image sensor in use
     * by the user.
     */
    void SetWaveformProperties (in CameraModule::WaveformHeader Header,
                                in RTCImage::SUB_IMAGE_MAP_LIST MapList)
      raises (InvalidHeader, InvalidMap);
       
    /**
     * Notifies camera user of the current rate that the camera is
     * taking triggering waveform playback. Camera users will use this
     * information to adjust their own image sampling rates.
     */
    void SetFrameRate (in double dRate);
  };    
};

#endif // INC_CAMERA_IDL
