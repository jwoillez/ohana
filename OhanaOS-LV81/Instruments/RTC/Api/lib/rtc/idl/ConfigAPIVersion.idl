/*
 * $RCSfile: ConfigAPIVersion.idl,v $
 * $Revision: 1.2 $
 * $Date: 2007/09/27 23:25:58 $
 */

/**
 * @file
 * The interface definition for the ConfigAPIVersion server.
 * @ingroup Configuration
 *
 * @author Michael Deck
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:25:58 $
 */

#ifndef INC_CONFIGSERVER_API_VERSION_IDL
#define INC_CONFIGSERVER_API_VERSION_IDL
#pragma prefix "rtc.jpl.nasa.gov"

#include "ConfigAPICommon.idl"
#include "ConfigAPIEnums.idl"
#include "ConfigAPIExceptions.idl"
#include "ConfigAPIStructs.idl"
#include "ConfigAPIBase.idl"

module RTC {
  module Configuration {
    /**
     * @addtogroup Configuration
     * @{
     */

    /**
     * Defines operations mostly having to do with versions (tags and branches).
     */
    interface ConfigAPIVersion
    {
      /**
       * Checkout the tag from the repository into the workspace, but do it
       * using only the items found on the tag and not looking for any items
       * that may be present in the workspace and not on the tag. If any
       * sticky-tagged item is in the way (either of a merge or a replace),
       * ConfigAPIException is thrown with messages you can inspect. There are
       * also warnings generated for things you might want to know about but
       * aren't errors.
       * <p>Events: TBD
       *
       * @param workspaceName is the workspace to checkout into
       * @param versionToCheckout tag or branch to checkout
       * @param branchToAddModule if checking out a sticky tag and need to
       * enroll module or query
       * @param recursiveContains if you want the children of the tagged items
       * as well
       * @param merge to have the merge results stay on the target's branch/tag
       * @param preserveLocalMods don't overwrite attributes of LM or LR items
       * @param commitPartial to do partial commits during checkout
       * @param validateAfterCheckout to validate the workspace after the
       * checkout (recommended)
       * @param useSelectedDate to inspect selectedDateAsString and use it
       * @param getOriginalAttributes to have merges collect original attributes
       * for possible diff
       * @param diffOnly to check for diffs only, don't make repository changes
       * @param selectedDateAsString to describe date limitation as ISO-format
       * stringified date
       * @param messages iterator for messages returned by checkout
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void checkoutSmallTag
        (in string workspaceName, in VersionIDStruct versionToCheckout,
         in VersionIDStruct branchToAddModule,
         in boolean recursiveContains, in boolean merge,
         in boolean preserveLocalMods, in boolean commitPartial,
         in boolean validateAfterCheckout, in boolean useSelectedDate,
         in boolean getOriginalAttributes, in boolean diffOnly,
         in string selectedDateAsString, inout StringIterator messages)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Checkout the version from the repository into the workspace. If any
       * sticky-tagged item is in the way (either of a merge or a replace),
       * ConfigAPIException is thrown with messages you can inspect. There are
       * also warnings generated for things you might want to know about but
       * aren't errors.
       * <p>Events: TBD
       *
       * @param workspaceName is the workspace to checkout into
       * @param versionToCheckout tag or branch to checkout
       * @param branchToAddModule if checking out a sticky tag and need to
       * enroll module or query
       * @param clearFirst to clear the workspace before checkout
       * @param merge to have the merge results stay on the target's branch/tag
       * @param preserveLocalMods don't overwrite attributes of LM or LR items
       * @param commitPartial to do partial commits during checkout
       * @param validateAfterCheckout to validate the workspace after the
       * checkout (recommended)
       * @param pruneMissing to remove items from the workspace that aren't in
       * the version
       * @param useSelectedDate to inspect selectedDateAsString and use it
       * @param getOriginalAttributes to have merges collect original attributes
       * for possible diff
       * @param diffOnly to check for diffs only, don't make repository changes
       * @param selectedDateAsString to describe date limitation as ISO-format
       * stringified date
       * @param messages iterator for messages returned by checkout
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void checkoutVersion
        (in string workspaceName, in VersionIDStruct versionToCheckout,
         in VersionIDStruct branchToAddModule,
         in boolean clearFirst, in boolean merge, in boolean preserveLocalMods,
         in boolean commitPartial,
         in boolean validateAfterCheckout,
         in boolean pruneMissing,
         in boolean useSelectedDate,
         in boolean getOriginalAttributes,
         in boolean diffOnly,
         in string selectedDateAsString,
         inout StringIterator messages)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Drop a tag or branch version, associating all checked-out items on
       * that tag or branch with the "Deleted" version. Fails if any item
       * on that branch is checked out.
       *
       * <p>Events: VersionDeleted
       *
       * @param  versionID tag or branch to remove
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void deleteVersion
        (in VersionIDStruct versionID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Produce messages describing differences between current items and
       * version in repository.
       * <p>Events: TBD
       *
       * @param  workspaceName is the workspace to diff
       * @param  versionToCheckout tag or branch
       * @param  recursiveContains whether or not to recursively diff items
       * contained
       * @param  useSelectedDate to inspect selectedDateAsString and use it
       * @param  selectedDateAsString to describe date limitation as ISO-format
       * stringified date
       * @param  messages iterator for messages returned by checkout
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      void diffVersion
        (in string workspaceName,
         in VersionIDStruct versionToCheckout,
         in boolean recursiveContains,
         in boolean useSelectedDate,
         in string selectedDateAsString,
         inout StringIterator messages)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Return a new wrapper with id cloned from version and all attributes set
       * from database or cache.
       *
       * @param versionID version to lookup
       * @return fully-attributed version
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      VersionInfoStruct getVersionAttributes
        (in VersionIDStruct versionID)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Get list of all versions (tags and branches) in repository.
       *
       * @return list of fully-attributed versions
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      VersionList lookupVersions
        ()
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Get list of item IDs (as any) that are in the given tag or branch.
       *
       * @param versionID version to lookup
       * @param items item iterator holder
       */
      void lookupItemsInVersion
        (in VersionIDStruct versionID, inout ItemIterator items)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Get list of attributed Versions (as any) for any item.
       *
       * @param fullItemName item to lookup
       * @param items item iterator holder
       */
      void lookupVersionsForItem
        (in string fullItemName, inout ItemIterator items)
          raises (ConfigAPIException, TaskKilledException);

      /**
       * Return true iff the named version exists in the repository.
       *
       * @param versionName
       * @return true iff the named version exists in the repository
       * @throws ConfigAPIException on errors
       * @throws TaskKilledException if task stopped by user
       */
      boolean versionExists
        (in string versionName)
          raises (ConfigAPIException, TaskKilledException);
    };
    /**
     * @}
     * end Configuration
     */
  };
};
#endif //INC_CONFIGSERVER_API_VERSION_IDL

