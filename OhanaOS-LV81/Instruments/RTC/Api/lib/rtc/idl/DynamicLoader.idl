/* $Source: /usr/local/cvsroot/kroot/kss/if/rtc/idl/DynamicLoader.idl,v $
 * $Id: DynamicLoader.idl,v 1.2 2007/09/27 23:25:59 intdev Exp $
 * -*- Mode: c++ -*-
 */

/**
 * @file
 * The interface definition for RTC::DynamicLoader built in service.
 *
 * @author Richard Johnson
 * @par Address:
 * JPL m/s 171-113, Pasadena California 91109
 * @par Copyright:
 * (c) 2002, California Institute of Technology, Pasadena CA
 * @version $Revision: 1.2 $
 * @date $Date: 2007/09/27 23:25:59 $
 */

#ifndef INC_RTC_DYNAMIC_LOADER_IDL
#define INC_RTC_DYNAMIC_LOADER_IDL

#include "Service.idl"
#include "Loadable.idl"

#pragma prefix "rtc.jpl.nasa.gov"

module RTC {

  /**
   * The DynamicLoader service enables users to dynamically load
   * user objects onto the CPU Manager process (e.g. additional services
   * and/or object factories).  The Dynamic Loader is itself an RTC::Service
   * but is special because it is built-in to the CPU Manager.
   *
   * The DyamicLoader object is obtained using the CPUManager::FindService
   * operation passing in the DynamicLoader::ServiceName as the name
   * argument.
   *
   * Clients can then narrow to the DynamicLoader interface and issue Load
   * operations to create loadable objects by passing in appropriate
   * loadable ids.
   */
  interface DynamicLoader : RTC::Service {

    /// Service name for the DynamicLoader
    const string ServiceName = "DynamicLoader";

    /// Reasons why an RTC module could not be created
    enum ReasonType {
      DUPLICATE_NAME, ///< A loadable object already loaded with the same name
      /// Shared library not found/couldn't be opened, unresolved symbols
      LOAD_FAILED,
      INVALID_INIT_FUNCTION, ///< Entry point not found in shared library
      INIT_FUNCTION_FAILED   ///< Intialization did not create loadable object
    };

    /// Loadable was not loaded onto CPU Manager
    exception NotLoaded {
      ReasonType Reason;
      string Details;
    };


    /**
     * Creates an RTC::Loadable by loading object code associated with Id.
     * @param Id The id of the loadable object
     * @return Object reference to the loadable object
     * @throw NotLoaded Loadable not able to be loaded
     * @throw Duplicate Duplicate loadable already loaded
     */
    RTC::Loadable Load(in RTC::Loadable::Id Id) raises (NotLoaded);
  };
};

#endif
